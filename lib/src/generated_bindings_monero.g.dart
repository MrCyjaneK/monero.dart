// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// monero_c bindings
class MoneroC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MoneroC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MoneroC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int getattrlistbulk(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlistbulk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistbulkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Uint64)>>('getattrlistbulk');
  late final _getattrlistbulk = _getattrlistbulkPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlistat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _getattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _getattrlistatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedLong)>>('getattrlistat');
  late final _getattrlistat = _getattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlistat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _setattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _setattrlistatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Uint32)>>('setattrlistat');
  late final _setattrlistat = _setattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int freadlink(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _freadlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freadlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('freadlink');
  late final _freadlink =
      _freadlinkPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int faccessat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _faccessat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _fchownat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, uid_t, gid_t,
              ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int linkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _linkat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int readlinkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _readlinkat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _symlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _unlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  /// POSIX.1-1990
  void _exit(
    int arg0,
  ) {
    return __exit(
      arg0,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int access(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _access(
      arg0,
      arg1,
    );
  }

  late final _accessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int alarm(
    int arg0,
  ) {
    return _alarm(
      arg0,
    );
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int chdir(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _chdir(
      arg0,
    );
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int chown(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _chown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, uid_t, gid_t)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int close(
    int arg0,
  ) {
    return _close(
      arg0,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  int dup(
    int arg0,
  ) {
    return _dup(
      arg0,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int arg0,
    int arg1,
  ) {
    return _dup2(
      arg0,
      arg1,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  int execl(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execl(
      __path,
      __arg0,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execle(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execle(
      __path,
      __arg0,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execlp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execlp(
      __file,
      __arg0,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execve(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __file,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int fpathconf(
    int arg0,
    int arg1,
  ) {
    return _fpathconf(
      arg0,
      arg1,
    );
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
          'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getcwd(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getcwd(
      arg0,
      arg1,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _getgroups(
      arg0,
      arg1,
    );
  }

  late final _getgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<gid_t>)>>(
      'getgroups');
  late final _getgroups =
      _getgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int isatty(
    int arg0,
  ) {
    return _isatty(
      arg0,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int link(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _link(
      arg0,
      arg1,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int lseek(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lseekPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Int, off_t, ffi.Int)>>(
          'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int pathconf(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _pathconf(
      arg0,
      arg1,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int pipe(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _pipe(
      arg0,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int read(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _read(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int rmdir(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rmdir(
      arg0,
    );
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setgid(
    int arg0,
  ) {
    return _setgid(
      arg0,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int arg0,
    int arg1,
  ) {
    return _setpgid(
      arg0,
      arg1,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, pid_t)>>('setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int setuid(
    int arg0,
  ) {
    return _setuid(
      arg0,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int sleep(
    int arg0,
  ) {
    return _sleep(
      arg0,
    );
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int sysconf(
    int arg0,
  ) {
    return _sysconf(
      arg0,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int tcgetpgrp(
    int arg0,
  ) {
    return _tcgetpgrp(
      arg0,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int arg0,
    int arg1,
  ) {
    return _tcsetpgrp(
      arg0,
      arg1,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, pid_t)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> ttyname(
    int arg0,
  ) {
    return _ttyname(
      arg0,
    );
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _ttyname_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ttyname_r');
  late final _ttyname_r =
      _ttyname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unlink(
      arg0,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
  ) {
    return _write(
      __fd,
      __buf,
      __nbyte,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int confstr(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _confstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('confstr');
  late final _confstr =
      _confstrPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getopt(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _getopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  /// getopt(3) external variables
  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> brk(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _brk(
      arg0,
    );
  }

  late final _brkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('brk');
  late final _brk = _brkPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  int chroot(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _chroot(
      arg0,
    );
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _crypt(
      arg0,
      arg1,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void encrypt(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _encrypt(
      arg0,
      arg1,
    );
  }

  late final _encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('encrypt');
  late final _encrypt =
      _encryptPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  int fchdir(
    int arg0,
  ) {
    return _fchdir(
      arg0,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  int getpgid(
    int arg0,
  ) {
    return _getpgid(
      arg0,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int getsid(
    int arg0,
  ) {
    return _getsid(
      arg0,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> getpass(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getpass(
      arg0,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getwd(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getwd(
      arg0,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int lchown(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _lchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, uid_t, gid_t)>>('lchown');
  late final _lchown =
      _lchownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int lockf(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lockf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, off_t)>>(
          'lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int nice(
    int arg0,
  ) {
    return _nice(
      arg0,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, off_t)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, off_t)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> sbrk(
    int arg0,
  ) {
    return _sbrk(
      arg0,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setregid(
    int arg0,
    int arg1,
  ) {
    return _setregid(
      arg0,
      arg1,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t, gid_t)>>('setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setreuid(
    int arg0,
    int arg1,
  ) {
    return _setreuid(
      arg0,
      arg1,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t, uid_t)>>('setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int truncate(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _truncate(
      arg0,
      arg1,
    );
  }

  late final _truncatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, off_t)>>(
      'truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ualarm(
    int arg0,
    int arg1,
  ) {
    return _ualarm(
      arg0,
      arg1,
    );
  }

  late final _ualarmPtr =
      _lookup<ffi.NativeFunction<useconds_t Function(useconds_t, useconds_t)>>(
          'ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int arg0,
  ) {
    return _usleep(
      arg0,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  /// End XSI
  int fsync(
    int arg0,
  ) {
    return _fsync(
      arg0,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int ftruncate(
    int arg0,
    int arg1,
  ) {
    return _ftruncate(
      arg0,
      arg1,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, off_t)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int getlogin_r(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getlogin_r(
      arg0,
      arg1,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fchown(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _fchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fchownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, uid_t, gid_t)>>(
          'fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int gethostname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _gethostname(
      arg0,
      arg1,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('gethostname');
  late final _gethostname =
      _gethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int readlink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _readlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int setegid(
    int arg0,
  ) {
    return _setegid(
      arg0,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int seteuid(
    int arg0,
  ) {
    return _seteuid(
      arg0,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int symlink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _symlink(
      arg0,
      arg1,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int pselect(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timespec> arg4,
    ffi.Pointer<sigset_t> arg5,
  ) {
    return _pselect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timespec>, ffi.Pointer<sigset_t>)>();

  int select(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timeval> arg4,
  ) {
    return _select(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int accessx_np(
    ffi.Pointer<accessx_descriptor> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    int arg3,
  ) {
    return _accessx_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _accessx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<accessx_descriptor>, ffi.Size,
              ffi.Pointer<ffi.Int>, uid_t)>>('accessx_np');
  late final _accessx_np = _accessx_npPtr.asFunction<
      int Function(
          ffi.Pointer<accessx_descriptor>, int, ffi.Pointer<ffi.Int>, int)>();

  int acct(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _acct(
      arg0,
    );
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acct');
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int add_profil(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _add_profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _add_profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedLong,
              ffi.UnsignedInt)>>('add_profil');
  late final _add_profil = _add_profilPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  int execvP(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __searchpath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvP(
      __file,
      __searchpath,
      __argv,
    );
  }

  late final _execvPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvP');
  late final _execvP = _execvPPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> fflagstostr(
    int arg0,
  ) {
    return _fflagstostr(
      arg0,
    );
  }

  late final _fflagstostrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>>(
      'fflagstostr');
  late final _fflagstostr =
      _fflagstostrPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int getdomainname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getdomainname(
      arg0,
      arg1,
    );
  }

  late final _getdomainnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'getdomainname');
  late final _getdomainname =
      _getdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int getgrouplist(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _getgrouplist(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getgrouplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('getgrouplist');
  late final _getgrouplist = _getgrouplistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int gethostuuid(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    ffi.Pointer<timespec> arg1,
  ) {
    return _gethostuuid(
      arg0,
      arg1,
    );
  }

  late final _gethostuuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<timespec>)>>('gethostuuid');
  late final _gethostuuid = _gethostuuidPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<timespec>)>();

  int getmode(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _getmode(
      arg0,
      arg1,
    );
  }

  late final _getmodePtr = _lookup<
          ffi.NativeFunction<mode_t Function(ffi.Pointer<ffi.Void>, mode_t)>>(
      'getmode');
  late final _getmode =
      _getmodePtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int getpeereid(
    int arg0,
    ffi.Pointer<uid_t> arg1,
    ffi.Pointer<gid_t> arg2,
  ) {
    return _getpeereid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getpeereidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('getpeereid');
  late final _getpeereid = _getpeereidPtr
      .asFunction<int Function(int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int getsgroups_np(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _getsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('getsgroups_np');
  late final _getsgroups_np = _getsgroups_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getwgroups_np(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _getwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('getwgroups_np');
  late final _getwgroups_np = _getwgroups_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  int initgroups(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _initgroups(
      arg0,
      arg1,
    );
  }

  late final _initgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'initgroups');
  late final _initgroups =
      _initgroupsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int issetugid() {
    return _issetugid();
  }

  late final _issetugidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('issetugid');
  late final _issetugid = _issetugidPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkdtemp(
      arg0,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mknod(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _mknod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mknodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t, dev_t)>>('mknod');
  late final _mknod =
      _mknodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int mkpath_np(
    ffi.Pointer<ffi.Char> path,
    int omode,
  ) {
    return _mkpath_np(
      path,
      omode,
    );
  }

  late final _mkpath_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'mkpath_np');
  late final _mkpath_np =
      _mkpath_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkpathat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int omode,
  ) {
    return _mkpathat_np(
      dfd,
      path,
      omode,
    );
  }

  late final _mkpathat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, mode_t)>>('mkpathat_np');
  late final _mkpathat_np = _mkpathat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _mkstemps(
      arg0,
      arg1,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkostemp(
    ffi.Pointer<ffi.Char> path,
    int oflags,
  ) {
    return _mkostemp(
      path,
      oflags,
    );
  }

  late final _mkostempPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkostemp');
  late final _mkostemp =
      _mkostempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkostemps(
    ffi.Pointer<ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostemps(
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('mkostemps');
  late final _mkostemps =
      _mkostempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  /// Non-portable mkstemp that uses open_dprotected_np
  int mkstemp_dprotected_np(
    ffi.Pointer<ffi.Char> path,
    int dpclass,
    int dpflags,
  ) {
    return _mkstemp_dprotected_np(
      path,
      dpclass,
      dpflags,
    );
  }

  late final _mkstemp_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('mkstemp_dprotected_np');
  late final _mkstemp_dprotected_np = _mkstemp_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> mkdtempat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _mkdtempat_np(
      dfd,
      path,
    );
  }

  late final _mkdtempat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('mkdtempat_np');
  late final _mkdtempat_np = _mkdtempat_npPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  int mkstempsat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int slen,
  ) {
    return _mkstempsat_np(
      dfd,
      path,
      slen,
    );
  }

  late final _mkstempsat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('mkstempsat_np');
  late final _mkstempsat_np = _mkstempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mkostempsat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostempsat_np(
      dfd,
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('mkostempsat_np');
  late final _mkostempsat_np = _mkostempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int nfssvc(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _nfssvc(
      arg0,
      arg1,
    );
  }

  late final _nfssvcPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'nfssvc');
  late final _nfssvc =
      _nfssvcPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int profil(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedLong,
              ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  int pthread_setugid_np(
    int arg0,
    int arg1,
  ) {
    return _pthread_setugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_setugid_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t, gid_t)>>(
          'pthread_setugid_np');
  late final _pthread_setugid_np =
      _pthread_setugid_npPtr.asFunction<int Function(int, int)>();

  int pthread_getugid_np(
    ffi.Pointer<uid_t> arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _pthread_getugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_getugid_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('pthread_getugid_np');
  late final _pthread_getugid_np = _pthread_getugid_npPtr
      .asFunction<int Function(ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int reboot(
    int arg0,
  ) {
    return _reboot(
      arg0,
    );
  }

  late final _rebootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('reboot');
  late final _reboot = _rebootPtr.asFunction<int Function(int)>();

  int revoke(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _revoke(
      arg0,
    );
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rcmd(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Int> arg5,
  ) {
    return _rcmd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _rcmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('rcmd');
  late final _rcmd = _rcmdPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int rcmd_af(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Int> arg5,
    int arg6,
  ) {
    return _rcmd_af(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _rcmd_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('rcmd_af');
  late final _rcmd_af = _rcmd_afPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int rresvport(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _rresvport(
      arg0,
    );
  }

  late final _rresvportPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'rresvport');
  late final _rresvport =
      _rresvportPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int rresvport_af(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _rresvport_af(
      arg0,
      arg1,
    );
  }

  late final _rresvport_afPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'rresvport_af');
  late final _rresvport_af =
      _rresvport_afPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int iruserok(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _iruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _iruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedLong, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('iruserok');
  late final _iruserok = _iruserokPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int iruserok_sa(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _iruserok_sa(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _iruserok_saPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('iruserok_sa');
  late final _iruserok_sa = _iruserok_saPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int ruserok(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _ruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ruserok');
  late final _ruserok = _ruserokPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int setdomainname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _setdomainname(
      arg0,
      arg1,
    );
  }

  late final _setdomainnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'setdomainname');
  late final _setdomainname =
      _setdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _setgroups(
      arg0,
      arg1,
    );
  }

  late final _setgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<gid_t>)>>(
      'setgroups');
  late final _setgroups =
      _setgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  void sethostid(
    int arg0,
  ) {
    return _sethostid(
      arg0,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<void Function(int)>();

  int sethostname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sethostname(
      arg0,
      arg1,
    );
  }

  late final _sethostnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sethostname');
  late final _sethostname =
      _sethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int setlogin(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setlogin(
      arg0,
    );
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> setmode(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setmode(
      arg0,
    );
  }

  late final _setmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>>('setmode');
  late final _setmode = _setmodePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  int setrgid(
    int arg0,
  ) {
    return _setrgid(
      arg0,
    );
  }

  late final _setrgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setrgid');
  late final _setrgid = _setrgidPtr.asFunction<int Function(int)>();

  int setruid(
    int arg0,
  ) {
    return _setruid(
      arg0,
    );
  }

  late final _setruidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('setruid');
  late final _setruid = _setruidPtr.asFunction<int Function(int)>();

  int setsgroups_np(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _setsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('setsgroups_np');
  late final _setsgroups_np = _setsgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int setwgroups_np(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _setwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('setwgroups_np');
  late final _setwgroups_np = _setwgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  int strtofflags(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.UnsignedLong> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
  ) {
    return _strtofflags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strtofflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>)>>('strtofflags');
  late final _strtofflags = _strtofflagsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.UnsignedLong>)>();

  int swapon(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _swapon(
      arg0,
    );
  }

  late final _swaponPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'swapon');
  late final _swapon =
      _swaponPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int undelete(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _undelete(
      arg0,
    );
  }

  late final _undeletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'undelete');
  late final _undelete =
      _undeletePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unwhiteout(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unwhiteout(
      arg0,
    );
  }

  late final _unwhiteoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unwhiteout');
  late final _unwhiteout =
      _unwhiteoutPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int syscall(
    int arg0,
  ) {
    return _syscall(
      arg0,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  /// getsubopt(3) external variable
  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fgetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fgetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fgetattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('fgetattrlist');
  late final _fgetattrlist = _fgetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int fsetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fsetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fsetattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('fsetattrlist');
  late final _fsetattrlist = _fsetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlist(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('getattrlist');
  late final _getattrlist = _getattrlistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlist(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _setattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _setattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('setattrlist');
  late final _setattrlist = _setattrlistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int exchangedata(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _exchangedata(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _exchangedataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('exchangedata');
  late final _exchangedata = _exchangedataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int getdirentriesattr(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
    ffi.Pointer<ffi.UnsignedInt> arg6,
    int arg7,
  ) {
    return _getdirentriesattr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _getdirentriesattrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('getdirentriesattr');
  late final _getdirentriesattr = _getdirentriesattrPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          int)>();

  int searchfs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<fssearchblock> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<searchstate> arg5,
  ) {
    return _searchfs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _searchfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<fssearchblock>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<searchstate>)>>('searchfs');
  late final _searchfs = _searchfsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<fssearchblock>,
          ffi.Pointer<ffi.UnsignedLong>, int, int, ffi.Pointer<searchstate>)>();

  int fsctl(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _fsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fsctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('fsctl');
  late final _fsctl = _fsctlPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>, int)>();

  int ffsctl(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _ffsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ffsctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.UnsignedLong, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('ffsctl');
  late final _ffsctl = _ffsctlPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int fsync_volume_np(
    int arg0,
    int arg1,
  ) {
    return _fsync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _fsync_volume_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'fsync_volume_np');
  late final _fsync_volume_np =
      _fsync_volume_npPtr.asFunction<int Function(int, int)>();

  int sync_volume_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _sync_volume_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sync_volume_np');
  late final _sync_volume_np =
      _sync_volume_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Int> _optreset = _lookup<ffi.Int>('optreset');

  int get optreset => _optreset.value;

  set optreset(int value) => _optreset.value = value;

  /// namespace Monero {
  /// enum NetworkType : uint8_t {
  /// MAINNET = 0,
  late final ffi.Pointer<ffi.Int> _NetworkType_MAINNET =
      _lookup<ffi.Int>('NetworkType_MAINNET');

  int get NetworkType_MAINNET => _NetworkType_MAINNET.value;

  /// TESTNET,
  late final ffi.Pointer<ffi.Int> _NetworkType_TESTNET =
      _lookup<ffi.Int>('NetworkType_TESTNET');

  int get NetworkType_TESTNET => _NetworkType_TESTNET.value;

  /// STAGENET
  late final ffi.Pointer<ffi.Int> _NetworkType_STAGENET =
      _lookup<ffi.Int>('NetworkType_STAGENET');

  int get NetworkType_STAGENET => _NetworkType_STAGENET.value;

  /// struct PendingTransaction
  /// {
  /// enum Status {
  /// Status_Ok,
  late final ffi.Pointer<ffi.Int> _PendingTransactionStatus_Ok =
      _lookup<ffi.Int>('PendingTransactionStatus_Ok');

  int get PendingTransactionStatus_Ok => _PendingTransactionStatus_Ok.value;

  /// Status_Error,
  late final ffi.Pointer<ffi.Int> _PendingTransactionStatus_Error =
      _lookup<ffi.Int>('PendingTransactionStatus_Error');

  int get PendingTransactionStatus_Error =>
      _PendingTransactionStatus_Error.value;

  /// Status_Critical
  late final ffi.Pointer<ffi.Int> _PendingTransactionStatus_Critical =
      _lookup<ffi.Int>('PendingTransactionStatus_Critical');

  int get PendingTransactionStatus_Critical =>
      _PendingTransactionStatus_Critical.value;

  /// };
  /// enum Priority {
  /// Priority_Default = 0,
  late final ffi.Pointer<ffi.Int> _Priority_Default =
      _lookup<ffi.Int>('Priority_Default');

  int get Priority_Default => _Priority_Default.value;

  /// Priority_Low = 1,
  late final ffi.Pointer<ffi.Int> _Priority_Low =
      _lookup<ffi.Int>('Priority_Low');

  int get Priority_Low => _Priority_Low.value;

  /// Priority_Medium = 2,
  late final ffi.Pointer<ffi.Int> _Priority_Medium =
      _lookup<ffi.Int>('Priority_Medium');

  int get Priority_Medium => _Priority_Medium.value;

  /// Priority_High = 3,
  late final ffi.Pointer<ffi.Int> _Priority_High =
      _lookup<ffi.Int>('Priority_High');

  int get Priority_High => _Priority_High.value;

  /// Priority_Last
  late final ffi.Pointer<ffi.Int> _Priority_Last =
      _lookup<ffi.Int>('Priority_Last');

  int get Priority_Last => _Priority_Last.value;

  /// };
  /// virtual ~PendingTransaction() = 0;
  /// virtual int status() const = 0;
  int MONERO_PendingTransaction_status(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
  ) {
    return _MONERO_PendingTransaction_status(
      pendingTx_ptr,
    );
  }

  late final _MONERO_PendingTransaction_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_PendingTransaction_status');
  late final _MONERO_PendingTransaction_status =
      _MONERO_PendingTransaction_statusPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string errorString() const = 0;
  ffi.Pointer<ffi.Char> MONERO_PendingTransaction_errorString(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
  ) {
    return _MONERO_PendingTransaction_errorString(
      pendingTx_ptr,
    );
  }

  late final _MONERO_PendingTransaction_errorStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_PendingTransaction_errorString');
  late final _MONERO_PendingTransaction_errorString =
      _MONERO_PendingTransaction_errorStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool commit(const std::string &filename = "", bool overwrite = false) = 0;
  bool MONERO_PendingTransaction_commit(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
    ffi.Pointer<ffi.Char> filename,
    bool overwrite,
  ) {
    return _MONERO_PendingTransaction_commit(
      pendingTx_ptr,
      filename,
      overwrite,
    );
  }

  late final _MONERO_PendingTransaction_commitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('MONERO_PendingTransaction_commit');
  late final _MONERO_PendingTransaction_commit =
      _MONERO_PendingTransaction_commitPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, bool)>();

  /// virtual uint64_t amount() const = 0;
  int MONERO_PendingTransaction_amount(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
  ) {
    return _MONERO_PendingTransaction_amount(
      pendingTx_ptr,
    );
  }

  late final _MONERO_PendingTransaction_amountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_PendingTransaction_amount');
  late final _MONERO_PendingTransaction_amount =
      _MONERO_PendingTransaction_amountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t dust() const = 0;
  int MONERO_PendingTransaction_dust(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
  ) {
    return _MONERO_PendingTransaction_dust(
      pendingTx_ptr,
    );
  }

  late final _MONERO_PendingTransaction_dustPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_PendingTransaction_dust');
  late final _MONERO_PendingTransaction_dust =
      _MONERO_PendingTransaction_dustPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t fee() const = 0;
  int MONERO_PendingTransaction_fee(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
  ) {
    return _MONERO_PendingTransaction_fee(
      pendingTx_ptr,
    );
  }

  late final _MONERO_PendingTransaction_feePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_PendingTransaction_fee');
  late final _MONERO_PendingTransaction_fee = _MONERO_PendingTransaction_feePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::vector<std::string> txid() const = 0;
  ffi.Pointer<ffi.Char> MONERO_PendingTransaction_txid(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_PendingTransaction_txid(
      pendingTx_ptr,
      separator,
    );
  }

  late final _MONERO_PendingTransaction_txidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_PendingTransaction_txid');
  late final _MONERO_PendingTransaction_txid =
      _MONERO_PendingTransaction_txidPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual uint64_t txCount() const = 0;
  int MONERO_PendingTransaction_txCount(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
  ) {
    return _MONERO_PendingTransaction_txCount(
      pendingTx_ptr,
    );
  }

  late final _MONERO_PendingTransaction_txCountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_PendingTransaction_txCount');
  late final _MONERO_PendingTransaction_txCount =
      _MONERO_PendingTransaction_txCountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::vector<uint32_t> subaddrAccount() const = 0;
  ffi.Pointer<ffi.Char> MONERO_PendingTransaction_subaddrAccount(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_PendingTransaction_subaddrAccount(
      pendingTx_ptr,
      separator,
    );
  }

  late final _MONERO_PendingTransaction_subaddrAccountPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>(
      'MONERO_PendingTransaction_subaddrAccount');
  late final _MONERO_PendingTransaction_subaddrAccount =
      _MONERO_PendingTransaction_subaddrAccountPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::vector<std::set<uint32_t>> subaddrIndices() const = 0;
  ffi.Pointer<ffi.Char> MONERO_PendingTransaction_subaddrIndices(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_PendingTransaction_subaddrIndices(
      pendingTx_ptr,
      separator,
    );
  }

  late final _MONERO_PendingTransaction_subaddrIndicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>(
      'MONERO_PendingTransaction_subaddrIndices');
  late final _MONERO_PendingTransaction_subaddrIndices =
      _MONERO_PendingTransaction_subaddrIndicesPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string multisigSignData() = 0;
  ffi.Pointer<ffi.Char> MONERO_PendingTransaction_multisigSignData(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
  ) {
    return _MONERO_PendingTransaction_multisigSignData(
      pendingTx_ptr,
    );
  }

  late final _MONERO_PendingTransaction_multisigSignDataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>(
      'MONERO_PendingTransaction_multisigSignData');
  late final _MONERO_PendingTransaction_multisigSignData =
      _MONERO_PendingTransaction_multisigSignDataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void signMultisigTx() = 0;
  void MONERO_PendingTransaction_signMultisigTx(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
  ) {
    return _MONERO_PendingTransaction_signMultisigTx(
      pendingTx_ptr,
    );
  }

  late final _MONERO_PendingTransaction_signMultisigTxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_PendingTransaction_signMultisigTx');
  late final _MONERO_PendingTransaction_signMultisigTx =
      _MONERO_PendingTransaction_signMultisigTxPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::vector<std::string> signersKeys() const = 0;
  ffi.Pointer<ffi.Char> MONERO_PendingTransaction_signersKeys(
    ffi.Pointer<ffi.Void> pendingTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_PendingTransaction_signersKeys(
      pendingTx_ptr,
      separator,
    );
  }

  late final _MONERO_PendingTransaction_signersKeysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_PendingTransaction_signersKeys');
  late final _MONERO_PendingTransaction_signersKeys =
      _MONERO_PendingTransaction_signersKeysPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// struct UnsignedTransaction
  /// {
  /// enum Status {
  /// Status_Ok,
  late final ffi.Pointer<ffi.Int> _UnsignedTransactionStatus_Ok =
      _lookup<ffi.Int>('UnsignedTransactionStatus_Ok');

  int get UnsignedTransactionStatus_Ok => _UnsignedTransactionStatus_Ok.value;

  /// Status_Error,
  late final ffi.Pointer<ffi.Int> _UnsignedTransactionStatus_Error =
      _lookup<ffi.Int>('UnsignedTransactionStatus_Error');

  int get UnsignedTransactionStatus_Error =>
      _UnsignedTransactionStatus_Error.value;

  /// Status_Critical
  late final ffi.Pointer<ffi.Int> _UnsignedTransactionStatus_Critical =
      _lookup<ffi.Int>('UnsignedTransactionStatus_Critical');

  int get UnsignedTransactionStatus_Critical =>
      _UnsignedTransactionStatus_Critical.value;

  /// };
  /// virtual ~UnsignedTransaction() = 0;
  /// virtual int status() const = 0;
  int MONERO_UnsignedTransaction_status(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
  ) {
    return _MONERO_UnsignedTransaction_status(
      unsignedTx_ptr,
    );
  }

  late final _MONERO_UnsignedTransaction_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_UnsignedTransaction_status');
  late final _MONERO_UnsignedTransaction_status =
      _MONERO_UnsignedTransaction_statusPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string errorString() const = 0;
  ffi.Pointer<ffi.Char> MONERO_UnsignedTransaction_errorString(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
  ) {
    return _MONERO_UnsignedTransaction_errorString(
      unsignedTx_ptr,
    );
  }

  late final _MONERO_UnsignedTransaction_errorStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>(
      'MONERO_UnsignedTransaction_errorString');
  late final _MONERO_UnsignedTransaction_errorString =
      _MONERO_UnsignedTransaction_errorStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::vector<uint64_t> amount() const = 0;
  ffi.Pointer<ffi.Char> MONERO_UnsignedTransaction_amount(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_UnsignedTransaction_amount(
      unsignedTx_ptr,
      separator,
    );
  }

  late final _MONERO_UnsignedTransaction_amountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_UnsignedTransaction_amount');
  late final _MONERO_UnsignedTransaction_amount =
      _MONERO_UnsignedTransaction_amountPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::vector<uint64_t>  fee() const = 0;
  ffi.Pointer<ffi.Char> MONERO_UnsignedTransaction_fee(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_UnsignedTransaction_fee(
      unsignedTx_ptr,
      separator,
    );
  }

  late final _MONERO_UnsignedTransaction_feePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_UnsignedTransaction_fee');
  late final _MONERO_UnsignedTransaction_fee =
      _MONERO_UnsignedTransaction_feePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::vector<uint64_t> mixin() const = 0;
  ffi.Pointer<ffi.Char> MONERO_UnsignedTransaction_mixin(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_UnsignedTransaction_mixin(
      unsignedTx_ptr,
      separator,
    );
  }

  late final _MONERO_UnsignedTransaction_mixinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_UnsignedTransaction_mixin');
  late final _MONERO_UnsignedTransaction_mixin =
      _MONERO_UnsignedTransaction_mixinPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string confirmationMessage() const = 0;
  ffi.Pointer<ffi.Char> MONERO_UnsignedTransaction_confirmationMessage(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
  ) {
    return _MONERO_UnsignedTransaction_confirmationMessage(
      unsignedTx_ptr,
    );
  }

  late final _MONERO_UnsignedTransaction_confirmationMessagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>(
      'MONERO_UnsignedTransaction_confirmationMessage');
  late final _MONERO_UnsignedTransaction_confirmationMessage =
      _MONERO_UnsignedTransaction_confirmationMessagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::vector<std::string> paymentId() const = 0;
  ffi.Pointer<ffi.Char> MONERO_UnsignedTransaction_paymentId(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_UnsignedTransaction_paymentId(
      unsignedTx_ptr,
      separator,
    );
  }

  late final _MONERO_UnsignedTransaction_paymentIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_UnsignedTransaction_paymentId');
  late final _MONERO_UnsignedTransaction_paymentId =
      _MONERO_UnsignedTransaction_paymentIdPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::vector<std::string> recipientAddress() const = 0;
  ffi.Pointer<ffi.Char> MONERO_UnsignedTransaction_recipientAddress(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_UnsignedTransaction_recipientAddress(
      unsignedTx_ptr,
      separator,
    );
  }

  late final _MONERO_UnsignedTransaction_recipientAddressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>(
      'MONERO_UnsignedTransaction_recipientAddress');
  late final _MONERO_UnsignedTransaction_recipientAddress =
      _MONERO_UnsignedTransaction_recipientAddressPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual uint64_t minMixinCount() const = 0;
  int MONERO_UnsignedTransaction_minMixinCount(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
  ) {
    return _MONERO_UnsignedTransaction_minMixinCount(
      unsignedTx_ptr,
    );
  }

  late final _MONERO_UnsignedTransaction_minMixinCountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_UnsignedTransaction_minMixinCount');
  late final _MONERO_UnsignedTransaction_minMixinCount =
      _MONERO_UnsignedTransaction_minMixinCountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t txCount() const = 0;
  int MONERO_UnsignedTransaction_txCount(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
  ) {
    return _MONERO_UnsignedTransaction_txCount(
      unsignedTx_ptr,
    );
  }

  late final _MONERO_UnsignedTransaction_txCountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_UnsignedTransaction_txCount');
  late final _MONERO_UnsignedTransaction_txCount =
      _MONERO_UnsignedTransaction_txCountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool sign(const std::string &signedFileName) = 0;
  bool MONERO_UnsignedTransaction_sign(
    ffi.Pointer<ffi.Void> unsignedTx_ptr,
    ffi.Pointer<ffi.Char> signedFileName,
  ) {
    return _MONERO_UnsignedTransaction_sign(
      unsignedTx_ptr,
      signedFileName,
    );
  }

  late final _MONERO_UnsignedTransaction_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_UnsignedTransaction_sign');
  late final _MONERO_UnsignedTransaction_sign =
      _MONERO_UnsignedTransaction_signPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// };
  /// struct TransactionInfo
  /// {
  /// enum Direction {
  /// Direction_In,
  late final ffi.Pointer<ffi.Int> _TransactionInfoDirection_In =
      _lookup<ffi.Int>('TransactionInfoDirection_In');

  int get TransactionInfoDirection_In => _TransactionInfoDirection_In.value;

  /// Direction_Out
  late final ffi.Pointer<ffi.Int> _TransactionInfoDirection_Out =
      _lookup<ffi.Int>('TransactionInfoDirection_Out');

  int get TransactionInfoDirection_Out => _TransactionInfoDirection_Out.value;

  /// };
  /// struct Transfer {
  /// Transfer(uint64_t _amount, const std::string &address);
  /// const uint64_t amount;
  /// const std::string address;
  /// };
  /// virtual ~TransactionInfo() = 0;
  /// virtual int  direction() const = 0;
  int MONERO_TransactionInfo_direction(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_direction(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_direction');
  late final _MONERO_TransactionInfo_direction =
      _MONERO_TransactionInfo_directionPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool isPending() const = 0;
  bool MONERO_TransactionInfo_isPending(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_isPending(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_isPendingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_isPending');
  late final _MONERO_TransactionInfo_isPending =
      _MONERO_TransactionInfo_isPendingPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool isFailed() const = 0;
  bool MONERO_TransactionInfo_isFailed(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_isFailed(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_isFailedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_isFailed');
  late final _MONERO_TransactionInfo_isFailed =
      _MONERO_TransactionInfo_isFailedPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool isCoinbase() const = 0;
  bool MONERO_TransactionInfo_isCoinbase(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_isCoinbase(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_isCoinbasePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_isCoinbase');
  late final _MONERO_TransactionInfo_isCoinbase =
      _MONERO_TransactionInfo_isCoinbasePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t amount() const = 0;
  int MONERO_TransactionInfo_amount(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_amount(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_amountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_amount');
  late final _MONERO_TransactionInfo_amount = _MONERO_TransactionInfo_amountPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t fee() const = 0;
  int MONERO_TransactionInfo_fee(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_fee(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_feePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_fee');
  late final _MONERO_TransactionInfo_fee = _MONERO_TransactionInfo_feePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t blockHeight() const = 0;
  int MONERO_TransactionInfo_blockHeight(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_blockHeight(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_blockHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_blockHeight');
  late final _MONERO_TransactionInfo_blockHeight =
      _MONERO_TransactionInfo_blockHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string description() const = 0;
  ffi.Pointer<ffi.Char> MONERO_TransactionInfo_description(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_description(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_TransactionInfo_description');
  late final _MONERO_TransactionInfo_description =
      _MONERO_TransactionInfo_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::set<uint32_t> subaddrIndex() const = 0;
  ffi.Pointer<ffi.Char> MONERO_TransactionInfo_subaddrIndex(
    ffi.Pointer<ffi.Void> txInfo_ptr,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_TransactionInfo_subaddrIndex(
      txInfo_ptr,
      separator,
    );
  }

  late final _MONERO_TransactionInfo_subaddrIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_TransactionInfo_subaddrIndex');
  late final _MONERO_TransactionInfo_subaddrIndex =
      _MONERO_TransactionInfo_subaddrIndexPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual uint32_t subaddrAccount() const = 0;
  int MONERO_TransactionInfo_subaddrAccount(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_subaddrAccount(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_subaddrAccountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_subaddrAccount');
  late final _MONERO_TransactionInfo_subaddrAccount =
      _MONERO_TransactionInfo_subaddrAccountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string label() const = 0;
  ffi.Pointer<ffi.Char> MONERO_TransactionInfo_label(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_label(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_TransactionInfo_label');
  late final _MONERO_TransactionInfo_label = _MONERO_TransactionInfo_labelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t confirmations() const = 0;
  int MONERO_TransactionInfo_confirmations(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_confirmations(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_confirmationsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_confirmations');
  late final _MONERO_TransactionInfo_confirmations =
      _MONERO_TransactionInfo_confirmationsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t unlockTime() const = 0;
  int MONERO_TransactionInfo_unlockTime(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_unlockTime(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_unlockTimePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_unlockTime');
  late final _MONERO_TransactionInfo_unlockTime =
      _MONERO_TransactionInfo_unlockTimePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string hash() const = 0;
  ffi.Pointer<ffi.Char> MONERO_TransactionInfo_hash(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_hash(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_TransactionInfo_hash');
  late final _MONERO_TransactionInfo_hash = _MONERO_TransactionInfo_hashPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::time_t timestamp() const = 0;
  int MONERO_TransactionInfo_timestamp(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_timestamp(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_timestampPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_timestamp');
  late final _MONERO_TransactionInfo_timestamp =
      _MONERO_TransactionInfo_timestampPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string paymentId() const = 0;
  ffi.Pointer<ffi.Char> MONERO_TransactionInfo_paymentId(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_paymentId(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_paymentIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_TransactionInfo_paymentId');
  late final _MONERO_TransactionInfo_paymentId =
      _MONERO_TransactionInfo_paymentIdPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual const std::vector<Transfer> & transfers() const = 0;
  int MONERO_TransactionInfo_transfers_count(
    ffi.Pointer<ffi.Void> txInfo_ptr,
  ) {
    return _MONERO_TransactionInfo_transfers_count(
      txInfo_ptr,
    );
  }

  late final _MONERO_TransactionInfo_transfers_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionInfo_transfers_count');
  late final _MONERO_TransactionInfo_transfers_count =
      _MONERO_TransactionInfo_transfers_countPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  int MONERO_TransactionInfo_transfers_amount(
    ffi.Pointer<ffi.Void> txInfo_ptr,
    int index,
  ) {
    return _MONERO_TransactionInfo_transfers_amount(
      txInfo_ptr,
      index,
    );
  }

  late final _MONERO_TransactionInfo_transfers_amountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'MONERO_TransactionInfo_transfers_amount');
  late final _MONERO_TransactionInfo_transfers_amount =
      _MONERO_TransactionInfo_transfers_amountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> MONERO_TransactionInfo_transfers_address(
    ffi.Pointer<ffi.Void> txInfo_ptr,
    int address,
  ) {
    return _MONERO_TransactionInfo_transfers_address(
      txInfo_ptr,
      address,
    );
  }

  late final _MONERO_TransactionInfo_transfers_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Int)>>('MONERO_TransactionInfo_transfers_address');
  late final _MONERO_TransactionInfo_transfers_address =
      _MONERO_TransactionInfo_transfers_addressPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, int)>();

  /// };
  /// struct TransactionHistory
  /// {
  /// virtual ~TransactionHistory() = 0;
  /// virtual int count() const = 0;
  int MONERO_TransactionHistory_count(
    ffi.Pointer<ffi.Void> txHistory_ptr,
  ) {
    return _MONERO_TransactionHistory_count(
      txHistory_ptr,
    );
  }

  late final _MONERO_TransactionHistory_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionHistory_count');
  late final _MONERO_TransactionHistory_count =
      _MONERO_TransactionHistory_countPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual TransactionInfo * transaction(int index)  const = 0;
  ffi.Pointer<ffi.Void> MONERO_TransactionHistory_transaction(
    ffi.Pointer<ffi.Void> txHistory_ptr,
    int index,
  ) {
    return _MONERO_TransactionHistory_transaction(
      txHistory_ptr,
      index,
    );
  }

  late final _MONERO_TransactionHistory_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Int)>>('MONERO_TransactionHistory_transaction');
  late final _MONERO_TransactionHistory_transaction =
      _MONERO_TransactionHistory_transactionPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual TransactionInfo * transaction(const std::string &id) const = 0;
  ffi.Pointer<ffi.Void> MONERO_TransactionHistory_transactionById(
    ffi.Pointer<ffi.Void> txHistory_ptr,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _MONERO_TransactionHistory_transactionById(
      txHistory_ptr,
      id,
    );
  }

  late final _MONERO_TransactionHistory_transactionByIdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>(
      'MONERO_TransactionHistory_transactionById');
  late final _MONERO_TransactionHistory_transactionById =
      _MONERO_TransactionHistory_transactionByIdPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::vector<TransactionInfo*> getAll() const = 0;
  /// virtual void refresh() = 0;
  void MONERO_TransactionHistory_refresh(
    ffi.Pointer<ffi.Void> txHistory_ptr,
  ) {
    return _MONERO_TransactionHistory_refresh(
      txHistory_ptr,
    );
  }

  late final _MONERO_TransactionHistory_refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_TransactionHistory_refresh');
  late final _MONERO_TransactionHistory_refresh =
      _MONERO_TransactionHistory_refreshPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setTxNote(const std::string &txid, const std::string &note) = 0;
  void MONERO_TransactionHistory_setTxNote(
    ffi.Pointer<ffi.Void> txHistory_ptr,
    ffi.Pointer<ffi.Char> txid,
    ffi.Pointer<ffi.Char> note,
  ) {
    return _MONERO_TransactionHistory_setTxNote(
      txHistory_ptr,
      txid,
      note,
    );
  }

  late final _MONERO_TransactionHistory_setTxNotePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_TransactionHistory_setTxNote');
  late final _MONERO_TransactionHistory_setTxNote =
      _MONERO_TransactionHistory_setTxNotePtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// private:
  /// std::size_t m_rowId;
  /// std::string m_address;
  /// std::string m_paymentId;
  /// std::string m_description;
  /// public:
  /// std::string extra;
  ffi.Pointer<ffi.Char> MONERO_AddressBookRow_extra(
    ffi.Pointer<ffi.Void> addressBookRow_ptr,
  ) {
    return _MONERO_AddressBookRow_extra(
      addressBookRow_ptr,
    );
  }

  late final _MONERO_AddressBookRow_extraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_AddressBookRow_extra');
  late final _MONERO_AddressBookRow_extra = _MONERO_AddressBookRow_extraPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getAddress() const {return m_address;}
  ffi.Pointer<ffi.Char> MONERO_AddressBookRow_getAddress(
    ffi.Pointer<ffi.Void> addressBookRow_ptr,
  ) {
    return _MONERO_AddressBookRow_getAddress(
      addressBookRow_ptr,
    );
  }

  late final _MONERO_AddressBookRow_getAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_AddressBookRow_getAddress');
  late final _MONERO_AddressBookRow_getAddress =
      _MONERO_AddressBookRow_getAddressPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getDescription() const {return m_description;}
  ffi.Pointer<ffi.Char> MONERO_AddressBookRow_getDescription(
    ffi.Pointer<ffi.Void> addressBookRow_ptr,
  ) {
    return _MONERO_AddressBookRow_getDescription(
      addressBookRow_ptr,
    );
  }

  late final _MONERO_AddressBookRow_getDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_AddressBookRow_getDescription');
  late final _MONERO_AddressBookRow_getDescription =
      _MONERO_AddressBookRow_getDescriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getPaymentId() const {return m_paymentId;}
  ffi.Pointer<ffi.Char> MONERO_AddressBookRow_getPaymentId(
    ffi.Pointer<ffi.Void> addressBookRow_ptr,
  ) {
    return _MONERO_AddressBookRow_getPaymentId(
      addressBookRow_ptr,
    );
  }

  late final _MONERO_AddressBookRow_getPaymentIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_AddressBookRow_getPaymentId');
  late final _MONERO_AddressBookRow_getPaymentId =
      _MONERO_AddressBookRow_getPaymentIdPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::size_t getRowId() const {return m_rowId;}
  int MONERO_AddressBookRow_getRowId(
    ffi.Pointer<ffi.Void> addressBookRow_ptr,
  ) {
    return _MONERO_AddressBookRow_getRowId(
      addressBookRow_ptr,
    );
  }

  late final _MONERO_AddressBookRow_getRowIdPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_AddressBookRow_getRowId');
  late final _MONERO_AddressBookRow_getRowId =
      _MONERO_AddressBookRow_getRowIdPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// };
  /// struct AddressBook
  /// {
  /// enum ErrorCode {
  /// Status_Ok,
  late final ffi.Pointer<ffi.Int> _AddressBookErrorCodeStatus_Ok =
      _lookup<ffi.Int>('AddressBookErrorCodeStatus_Ok');

  int get AddressBookErrorCodeStatus_Ok => _AddressBookErrorCodeStatus_Ok.value;

  /// General_Error,
  late final ffi.Pointer<ffi.Int> _AddressBookErrorCodeGeneral_Error =
      _lookup<ffi.Int>('AddressBookErrorCodeGeneral_Error');

  int get AddressBookErrorCodeGeneral_Error =>
      _AddressBookErrorCodeGeneral_Error.value;

  /// Invalid_Address,
  late final ffi.Pointer<ffi.Int> _AddressBookErrorCodeInvalid_Address =
      _lookup<ffi.Int>('AddressBookErrorCodeInvalid_Address');

  int get AddressBookErrorCodeInvalid_Address =>
      _AddressBookErrorCodeInvalid_Address.value;

  /// Invalid_Payment_Id
  late final ffi.Pointer<ffi.Int> _AddressBookErrorCodeInvalidPaymentId =
      _lookup<ffi.Int>('AddressBookErrorCodeInvalidPaymentId');

  int get AddressBookErrorCodeInvalidPaymentId =>
      _AddressBookErrorCodeInvalidPaymentId.value;

  /// };
  /// virtual ~AddressBook() = 0;
  /// virtual std::vector<AddressBookRow*> getAll() const = 0;
  int MONERO_AddressBook_getAll_size(
    ffi.Pointer<ffi.Void> addressBook_ptr,
  ) {
    return _MONERO_AddressBook_getAll_size(
      addressBook_ptr,
    );
  }

  late final _MONERO_AddressBook_getAll_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_AddressBook_getAll_size');
  late final _MONERO_AddressBook_getAll_size =
      _MONERO_AddressBook_getAll_sizePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> MONERO_AddressBook_getAll_byIndex(
    ffi.Pointer<ffi.Void> addressBook_ptr,
    int index,
  ) {
    return _MONERO_AddressBook_getAll_byIndex(
      addressBook_ptr,
      index,
    );
  }

  late final _MONERO_AddressBook_getAll_byIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Int)>>('MONERO_AddressBook_getAll_byIndex');
  late final _MONERO_AddressBook_getAll_byIndex =
      _MONERO_AddressBook_getAll_byIndexPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual bool addRow(const std::string &dst_addr , const std::string &payment_id, const std::string &description) = 0;
  bool MONERO_AddressBook_addRow(
    ffi.Pointer<ffi.Void> addressBook_ptr,
    ffi.Pointer<ffi.Char> dst_addr,
    ffi.Pointer<ffi.Char> payment_id,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _MONERO_AddressBook_addRow(
      addressBook_ptr,
      dst_addr,
      payment_id,
      description,
    );
  }

  late final _MONERO_AddressBook_addRowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_AddressBook_addRow');
  late final _MONERO_AddressBook_addRow =
      _MONERO_AddressBook_addRowPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool deleteRow(std::size_t rowId) = 0;
  bool MONERO_AddressBook_deleteRow(
    ffi.Pointer<ffi.Void> addressBook_ptr,
    int rowId,
  ) {
    return _MONERO_AddressBook_deleteRow(
      addressBook_ptr,
      rowId,
    );
  }

  late final _MONERO_AddressBook_deleteRowPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'MONERO_AddressBook_deleteRow');
  late final _MONERO_AddressBook_deleteRow = _MONERO_AddressBook_deleteRowPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual bool setDescription(std::size_t index, const std::string &description) = 0;
  bool MONERO_AddressBook_setDescription(
    ffi.Pointer<ffi.Void> addressBook_ptr,
    int rowId,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _MONERO_AddressBook_setDescription(
      addressBook_ptr,
      rowId,
      description,
    );
  }

  late final _MONERO_AddressBook_setDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('MONERO_AddressBook_setDescription');
  late final _MONERO_AddressBook_setDescription =
      _MONERO_AddressBook_setDescriptionPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  /// virtual void refresh() = 0;
  void MONERO_AddressBook_refresh(
    ffi.Pointer<ffi.Void> addressBook_ptr,
  ) {
    return _MONERO_AddressBook_refresh(
      addressBook_ptr,
    );
  }

  late final _MONERO_AddressBook_refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_AddressBook_refresh');
  late final _MONERO_AddressBook_refresh = _MONERO_AddressBook_refreshPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string errorString() const = 0;
  ffi.Pointer<ffi.Char> MONERO_AddressBook_errorString(
    ffi.Pointer<ffi.Void> addressBook_ptr,
  ) {
    return _MONERO_AddressBook_errorString(
      addressBook_ptr,
    );
  }

  late final _MONERO_AddressBook_errorStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_AddressBook_errorString');
  late final _MONERO_AddressBook_errorString =
      _MONERO_AddressBook_errorStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual int errorCode() const = 0;
  int MONERO_AddressBook_errorCode(
    ffi.Pointer<ffi.Void> addressBook_ptr,
  ) {
    return _MONERO_AddressBook_errorCode(
      addressBook_ptr,
    );
  }

  late final _MONERO_AddressBook_errorCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_AddressBook_errorCode');
  late final _MONERO_AddressBook_errorCode = _MONERO_AddressBook_errorCodePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual int lookupPaymentID(const std::string &payment_id) const = 0;
  int MONERO_AddressBook_lookupPaymentID(
    ffi.Pointer<ffi.Void> addressBook_ptr,
    ffi.Pointer<ffi.Char> payment_id,
  ) {
    return _MONERO_AddressBook_lookupPaymentID(
      addressBook_ptr,
      payment_id,
    );
  }

  late final _MONERO_AddressBook_lookupPaymentIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_AddressBook_lookupPaymentID');
  late final _MONERO_AddressBook_lookupPaymentID =
      _MONERO_AddressBook_lookupPaymentIDPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// };
  /// struct CoinsInfo
  /// {
  /// virtual ~CoinsInfo() = 0;
  /// virtual uint64_t blockHeight() const = 0;
  int MONERO_CoinsInfo_blockHeight(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_blockHeight(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_blockHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_blockHeight');
  late final _MONERO_CoinsInfo_blockHeight = _MONERO_CoinsInfo_blockHeightPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string hash() const = 0;
  ffi.Pointer<ffi.Char> MONERO_CoinsInfo_hash(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_hash(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_CoinsInfo_hash');
  late final _MONERO_CoinsInfo_hash = _MONERO_CoinsInfo_hashPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual size_t internalOutputIndex() const = 0;
  int MONERO_CoinsInfo_internalOutputIndex(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_internalOutputIndex(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_internalOutputIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_internalOutputIndex');
  late final _MONERO_CoinsInfo_internalOutputIndex =
      _MONERO_CoinsInfo_internalOutputIndexPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t globalOutputIndex() const = 0;
  int MONERO_CoinsInfo_globalOutputIndex(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_globalOutputIndex(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_globalOutputIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_globalOutputIndex');
  late final _MONERO_CoinsInfo_globalOutputIndex =
      _MONERO_CoinsInfo_globalOutputIndexPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool spent() const = 0;
  bool MONERO_CoinsInfo_spent(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_spent(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_spentPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_spent');
  late final _MONERO_CoinsInfo_spent = _MONERO_CoinsInfo_spentPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool frozen() const = 0;
  bool MONERO_CoinsInfo_frozen(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_frozen(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_frozenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_frozen');
  late final _MONERO_CoinsInfo_frozen = _MONERO_CoinsInfo_frozenPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t spentHeight() const = 0;
  int MONERO_CoinsInfo_spentHeight(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_spentHeight(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_spentHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_spentHeight');
  late final _MONERO_CoinsInfo_spentHeight = _MONERO_CoinsInfo_spentHeightPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t amount() const = 0;
  int MONERO_CoinsInfo_amount(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_amount(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_amountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_amount');
  late final _MONERO_CoinsInfo_amount = _MONERO_CoinsInfo_amountPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool rct() const = 0;
  bool MONERO_CoinsInfo_rct(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_rct(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_rctPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_rct');
  late final _MONERO_CoinsInfo_rct = _MONERO_CoinsInfo_rctPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool keyImageKnown() const = 0;
  bool MONERO_CoinsInfo_keyImageKnown(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_keyImageKnown(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_keyImageKnownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_keyImageKnown');
  late final _MONERO_CoinsInfo_keyImageKnown =
      _MONERO_CoinsInfo_keyImageKnownPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual size_t pkIndex() const = 0;
  int MONERO_CoinsInfo_pkIndex(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_pkIndex(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_pkIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_pkIndex');
  late final _MONERO_CoinsInfo_pkIndex = _MONERO_CoinsInfo_pkIndexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint32_t subaddrIndex() const = 0;
  int MONERO_CoinsInfo_subaddrIndex(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_subaddrIndex(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_subaddrIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_subaddrIndex');
  late final _MONERO_CoinsInfo_subaddrIndex = _MONERO_CoinsInfo_subaddrIndexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint32_t subaddrAccount() const = 0;
  int MONERO_CoinsInfo_subaddrAccount(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_subaddrAccount(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_subaddrAccountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_subaddrAccount');
  late final _MONERO_CoinsInfo_subaddrAccount =
      _MONERO_CoinsInfo_subaddrAccountPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string address() const = 0;
  ffi.Pointer<ffi.Char> MONERO_CoinsInfo_address(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_address(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_CoinsInfo_address');
  late final _MONERO_CoinsInfo_address = _MONERO_CoinsInfo_addressPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string addressLabel() const = 0;
  ffi.Pointer<ffi.Char> MONERO_CoinsInfo_addressLabel(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_addressLabel(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_addressLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_CoinsInfo_addressLabel');
  late final _MONERO_CoinsInfo_addressLabel = _MONERO_CoinsInfo_addressLabelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string keyImage() const = 0;
  ffi.Pointer<ffi.Char> MONERO_CoinsInfo_keyImage(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_keyImage(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_keyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_CoinsInfo_keyImage');
  late final _MONERO_CoinsInfo_keyImage = _MONERO_CoinsInfo_keyImagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t unlockTime() const = 0;
  int MONERO_CoinsInfo_unlockTime(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_unlockTime(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_unlockTimePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_unlockTime');
  late final _MONERO_CoinsInfo_unlockTime = _MONERO_CoinsInfo_unlockTimePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool unlocked() const = 0;
  bool MONERO_CoinsInfo_unlocked(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_unlocked(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_unlocked');
  late final _MONERO_CoinsInfo_unlocked = _MONERO_CoinsInfo_unlockedPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string pubKey() const = 0;
  ffi.Pointer<ffi.Char> MONERO_CoinsInfo_pubKey(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_pubKey(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_pubKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_CoinsInfo_pubKey');
  late final _MONERO_CoinsInfo_pubKey = _MONERO_CoinsInfo_pubKeyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool coinbase() const = 0;
  bool MONERO_CoinsInfo_coinbase(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_coinbase(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_coinbasePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_CoinsInfo_coinbase');
  late final _MONERO_CoinsInfo_coinbase = _MONERO_CoinsInfo_coinbasePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string description() const = 0;
  ffi.Pointer<ffi.Char> MONERO_CoinsInfo_description(
    ffi.Pointer<ffi.Void> coinsInfo_ptr,
  ) {
    return _MONERO_CoinsInfo_description(
      coinsInfo_ptr,
    );
  }

  late final _MONERO_CoinsInfo_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_CoinsInfo_description');
  late final _MONERO_CoinsInfo_description = _MONERO_CoinsInfo_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// };
  /// struct Coins
  /// {
  /// virtual ~Coins() = 0;
  /// virtual int count() const = 0;
  int MONERO_Coins_count(
    ffi.Pointer<ffi.Void> coins_ptr,
  ) {
    return _MONERO_Coins_count(
      coins_ptr,
    );
  }

  late final _MONERO_Coins_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Coins_count');
  late final _MONERO_Coins_count =
      _MONERO_Coins_countPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual CoinsInfo * coin(int index)  const = 0;
  ffi.Pointer<ffi.Void> MONERO_Coins_coin(
    ffi.Pointer<ffi.Void> coins_ptr,
    int index,
  ) {
    return _MONERO_Coins_coin(
      coins_ptr,
      index,
    );
  }

  late final _MONERO_Coins_coinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('MONERO_Coins_coin');
  late final _MONERO_Coins_coin = _MONERO_Coins_coinPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual std::vector<CoinsInfo*> getAll() const = 0;
  int MONERO_Coins_getAll_size(
    ffi.Pointer<ffi.Void> coins_ptr,
  ) {
    return _MONERO_Coins_getAll_size(
      coins_ptr,
    );
  }

  late final _MONERO_Coins_getAll_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Coins_getAll_size');
  late final _MONERO_Coins_getAll_size = _MONERO_Coins_getAll_sizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> MONERO_Coins_getAll_byIndex(
    ffi.Pointer<ffi.Void> coins_ptr,
    int index,
  ) {
    return _MONERO_Coins_getAll_byIndex(
      coins_ptr,
      index,
    );
  }

  late final _MONERO_Coins_getAll_byIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('MONERO_Coins_getAll_byIndex');
  late final _MONERO_Coins_getAll_byIndex = _MONERO_Coins_getAll_byIndexPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual void refresh() = 0;
  void MONERO_Coins_refresh(
    ffi.Pointer<ffi.Void> coins_ptr,
  ) {
    return _MONERO_Coins_refresh(
      coins_ptr,
    );
  }

  late final _MONERO_Coins_refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Coins_refresh');
  late final _MONERO_Coins_refresh = _MONERO_Coins_refreshPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setFrozen(std::string public_key) = 0;
  void MONERO_Coins_setFrozenByPublicKey(
    ffi.Pointer<ffi.Void> coins_ptr,
    ffi.Pointer<ffi.Char> public_key,
  ) {
    return _MONERO_Coins_setFrozenByPublicKey(
      coins_ptr,
      public_key,
    );
  }

  late final _MONERO_Coins_setFrozenByPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Coins_setFrozenByPublicKey');
  late final _MONERO_Coins_setFrozenByPublicKey =
      _MONERO_Coins_setFrozenByPublicKeyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual void setFrozen(int index) = 0;
  void MONERO_Coins_setFrozen(
    ffi.Pointer<ffi.Void> coins_ptr,
    int index,
  ) {
    return _MONERO_Coins_setFrozen(
      coins_ptr,
      index,
    );
  }

  late final _MONERO_Coins_setFrozenPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'MONERO_Coins_setFrozen');
  late final _MONERO_Coins_setFrozen = _MONERO_Coins_setFrozenPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual void thaw(int index) = 0;
  void MONERO_Coins_thaw(
    ffi.Pointer<ffi.Void> coins_ptr,
    int index,
  ) {
    return _MONERO_Coins_thaw(
      coins_ptr,
      index,
    );
  }

  late final _MONERO_Coins_thawPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'MONERO_Coins_thaw');
  late final _MONERO_Coins_thaw = _MONERO_Coins_thawPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual void thaw(std::string public_key) = 0;
  void MONERO_Coins_thawByPublicKey(
    ffi.Pointer<ffi.Void> coins_ptr,
    ffi.Pointer<ffi.Char> public_key,
  ) {
    return _MONERO_Coins_thawByPublicKey(
      coins_ptr,
      public_key,
    );
  }

  late final _MONERO_Coins_thawByPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Coins_thawByPublicKey');
  late final _MONERO_Coins_thawByPublicKey =
      _MONERO_Coins_thawByPublicKeyPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool isTransferUnlocked(uint64_t unlockTime, uint64_t blockHeight) = 0;
  bool MONERO_Coins_isTransferUnlocked(
    ffi.Pointer<ffi.Void> coins_ptr,
    int unlockTime,
    int blockHeight,
  ) {
    return _MONERO_Coins_isTransferUnlocked(
      coins_ptr,
      unlockTime,
      blockHeight,
    );
  }

  late final _MONERO_Coins_isTransferUnlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Uint64,
              ffi.Uint64)>>('MONERO_Coins_isTransferUnlocked');
  late final _MONERO_Coins_isTransferUnlocked =
      _MONERO_Coins_isTransferUnlockedPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// virtual void setDescription(const std::string &public_key, const std::string &description) = 0;
  void MONERO_Coins_setDescription(
    ffi.Pointer<ffi.Void> coins_ptr,
    ffi.Pointer<ffi.Char> public_key,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _MONERO_Coins_setDescription(
      coins_ptr,
      public_key,
      description,
    );
  }

  late final _MONERO_Coins_setDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Coins_setDescription');
  late final _MONERO_Coins_setDescription =
      _MONERO_Coins_setDescriptionPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// private:
  /// std::size_t m_rowId;
  /// std::string m_address;
  /// std::string m_label;
  /// public:
  /// std::string extra;
  ffi.Pointer<ffi.Char> MONERO_SubaddressRow_extra(
    ffi.Pointer<ffi.Void> subaddressRow_ptr,
  ) {
    return _MONERO_SubaddressRow_extra(
      subaddressRow_ptr,
    );
  }

  late final _MONERO_SubaddressRow_extraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_SubaddressRow_extra');
  late final _MONERO_SubaddressRow_extra = _MONERO_SubaddressRow_extraPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getAddress() const {return m_address;}
  ffi.Pointer<ffi.Char> MONERO_SubaddressRow_getAddress(
    ffi.Pointer<ffi.Void> subaddressRow_ptr,
  ) {
    return _MONERO_SubaddressRow_getAddress(
      subaddressRow_ptr,
    );
  }

  late final _MONERO_SubaddressRow_getAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_SubaddressRow_getAddress');
  late final _MONERO_SubaddressRow_getAddress =
      _MONERO_SubaddressRow_getAddressPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getLabel() const {return m_label;}
  ffi.Pointer<ffi.Char> MONERO_SubaddressRow_getLabel(
    ffi.Pointer<ffi.Void> subaddressRow_ptr,
  ) {
    return _MONERO_SubaddressRow_getLabel(
      subaddressRow_ptr,
    );
  }

  late final _MONERO_SubaddressRow_getLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_SubaddressRow_getLabel');
  late final _MONERO_SubaddressRow_getLabel = _MONERO_SubaddressRow_getLabelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::size_t getRowId() const {return m_rowId;}
  int MONERO_SubaddressRow_getRowId(
    ffi.Pointer<ffi.Void> subaddressRow_ptr,
  ) {
    return _MONERO_SubaddressRow_getRowId(
      subaddressRow_ptr,
    );
  }

  late final _MONERO_SubaddressRow_getRowIdPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_SubaddressRow_getRowId');
  late final _MONERO_SubaddressRow_getRowId = _MONERO_SubaddressRow_getRowIdPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// struct Subaddress
  /// {
  /// virtual ~Subaddress() = 0;
  /// virtual std::vector<SubaddressRow*> getAll() const = 0;
  int MONERO_Subaddress_getAll_size(
    ffi.Pointer<ffi.Void> subaddress_ptr,
  ) {
    return _MONERO_Subaddress_getAll_size(
      subaddress_ptr,
    );
  }

  late final _MONERO_Subaddress_getAll_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Subaddress_getAll_size');
  late final _MONERO_Subaddress_getAll_size = _MONERO_Subaddress_getAll_sizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> MONERO_Subaddress_getAll_byIndex(
    ffi.Pointer<ffi.Void> subaddress_ptr,
    int index,
  ) {
    return _MONERO_Subaddress_getAll_byIndex(
      subaddress_ptr,
      index,
    );
  }

  late final _MONERO_Subaddress_getAll_byIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Int)>>('MONERO_Subaddress_getAll_byIndex');
  late final _MONERO_Subaddress_getAll_byIndex =
      _MONERO_Subaddress_getAll_byIndexPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual void addRow(uint32_t accountIndex, const std::string &label) = 0;
  void MONERO_Subaddress_addRow(
    ffi.Pointer<ffi.Void> subaddress_ptr,
    int accountIndex,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _MONERO_Subaddress_addRow(
      subaddress_ptr,
      accountIndex,
      label,
    );
  }

  late final _MONERO_Subaddress_addRowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('MONERO_Subaddress_addRow');
  late final _MONERO_Subaddress_addRow =
      _MONERO_Subaddress_addRowPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  /// virtual void setLabel(uint32_t accountIndex, uint32_t addressIndex, const std::string &label) = 0;
  void MONERO_Subaddress_setLabel(
    ffi.Pointer<ffi.Void> subaddress_ptr,
    int accountIndex,
    int addressIndex,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _MONERO_Subaddress_setLabel(
      subaddress_ptr,
      accountIndex,
      addressIndex,
      label,
    );
  }

  late final _MONERO_Subaddress_setLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('MONERO_Subaddress_setLabel');
  late final _MONERO_Subaddress_setLabel =
      _MONERO_Subaddress_setLabelPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>)>();

  /// virtual void refresh(uint32_t accountIndex) = 0;
  void MONERO_Subaddress_refresh(
    ffi.Pointer<ffi.Void> subaddress_ptr,
    int accountIndex,
  ) {
    return _MONERO_Subaddress_refresh(
      subaddress_ptr,
      accountIndex,
    );
  }

  late final _MONERO_Subaddress_refreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32)>>('MONERO_Subaddress_refresh');
  late final _MONERO_Subaddress_refresh = _MONERO_Subaddress_refreshPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// private:
  /// std::size_t m_rowId;
  /// std::string m_address;
  /// std::string m_label;
  /// std::string m_balance;
  /// std::string m_unlockedBalance;
  /// public:
  /// std::string extra;
  ffi.Pointer<ffi.Char> MONERO_SubaddressAccountRow_extra(
    ffi.Pointer<ffi.Void> subaddressAccountRow_ptr,
  ) {
    return _MONERO_SubaddressAccountRow_extra(
      subaddressAccountRow_ptr,
    );
  }

  late final _MONERO_SubaddressAccountRow_extraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_SubaddressAccountRow_extra');
  late final _MONERO_SubaddressAccountRow_extra =
      _MONERO_SubaddressAccountRow_extraPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getAddress() const {return m_address;}
  ffi.Pointer<ffi.Char> MONERO_SubaddressAccountRow_getAddress(
    ffi.Pointer<ffi.Void> subaddressAccountRow_ptr,
  ) {
    return _MONERO_SubaddressAccountRow_getAddress(
      subaddressAccountRow_ptr,
    );
  }

  late final _MONERO_SubaddressAccountRow_getAddressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>(
      'MONERO_SubaddressAccountRow_getAddress');
  late final _MONERO_SubaddressAccountRow_getAddress =
      _MONERO_SubaddressAccountRow_getAddressPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getLabel() const {return m_label;}
  ffi.Pointer<ffi.Char> MONERO_SubaddressAccountRow_getLabel(
    ffi.Pointer<ffi.Void> subaddressAccountRow_ptr,
  ) {
    return _MONERO_SubaddressAccountRow_getLabel(
      subaddressAccountRow_ptr,
    );
  }

  late final _MONERO_SubaddressAccountRow_getLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_SubaddressAccountRow_getLabel');
  late final _MONERO_SubaddressAccountRow_getLabel =
      _MONERO_SubaddressAccountRow_getLabelPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getBalance() const {return m_balance;}
  ffi.Pointer<ffi.Char> MONERO_SubaddressAccountRow_getBalance(
    ffi.Pointer<ffi.Void> subaddressAccountRow_ptr,
  ) {
    return _MONERO_SubaddressAccountRow_getBalance(
      subaddressAccountRow_ptr,
    );
  }

  late final _MONERO_SubaddressAccountRow_getBalancePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>(
      'MONERO_SubaddressAccountRow_getBalance');
  late final _MONERO_SubaddressAccountRow_getBalance =
      _MONERO_SubaddressAccountRow_getBalancePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::string getUnlockedBalance() const {return m_unlockedBalance;}
  ffi.Pointer<ffi.Char> MONERO_SubaddressAccountRow_getUnlockedBalance(
    ffi.Pointer<ffi.Void> subaddressAccountRow_ptr,
  ) {
    return _MONERO_SubaddressAccountRow_getUnlockedBalance(
      subaddressAccountRow_ptr,
    );
  }

  late final _MONERO_SubaddressAccountRow_getUnlockedBalancePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>(
      'MONERO_SubaddressAccountRow_getUnlockedBalance');
  late final _MONERO_SubaddressAccountRow_getUnlockedBalance =
      _MONERO_SubaddressAccountRow_getUnlockedBalancePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// std::size_t getRowId() const {return m_rowId;}
  int MONERO_SubaddressAccountRow_getRowId(
    ffi.Pointer<ffi.Void> subaddressAccountRow_ptr,
  ) {
    return _MONERO_SubaddressAccountRow_getRowId(
      subaddressAccountRow_ptr,
    );
  }

  late final _MONERO_SubaddressAccountRow_getRowIdPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_SubaddressAccountRow_getRowId');
  late final _MONERO_SubaddressAccountRow_getRowId =
      _MONERO_SubaddressAccountRow_getRowIdPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// struct SubaddressAccount
  /// {
  /// virtual ~SubaddressAccount() = 0;
  /// virtual std::vector<SubaddressAccountRow*> getAll() const = 0;
  int MONERO_SubaddressAccount_getAll_size(
    ffi.Pointer<ffi.Void> subaddressAccount_ptr,
  ) {
    return _MONERO_SubaddressAccount_getAll_size(
      subaddressAccount_ptr,
    );
  }

  late final _MONERO_SubaddressAccount_getAll_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_SubaddressAccount_getAll_size');
  late final _MONERO_SubaddressAccount_getAll_size =
      _MONERO_SubaddressAccount_getAll_sizePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> MONERO_SubaddressAccount_getAll_byIndex(
    ffi.Pointer<ffi.Void> subaddressAccount_ptr,
    int index,
  ) {
    return _MONERO_SubaddressAccount_getAll_byIndex(
      subaddressAccount_ptr,
      index,
    );
  }

  late final _MONERO_SubaddressAccount_getAll_byIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Int)>>('MONERO_SubaddressAccount_getAll_byIndex');
  late final _MONERO_SubaddressAccount_getAll_byIndex =
      _MONERO_SubaddressAccount_getAll_byIndexPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual void addRow(const std::string &label) = 0;
  void MONERO_SubaddressAccount_addRow(
    ffi.Pointer<ffi.Void> subaddressAccount_ptr,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _MONERO_SubaddressAccount_addRow(
      subaddressAccount_ptr,
      label,
    );
  }

  late final _MONERO_SubaddressAccount_addRowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_SubaddressAccount_addRow');
  late final _MONERO_SubaddressAccount_addRow =
      _MONERO_SubaddressAccount_addRowPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual void setLabel(uint32_t accountIndex, const std::string &label) = 0;
  void MONERO_SubaddressAccount_setLabel(
    ffi.Pointer<ffi.Void> subaddressAccount_ptr,
    int accountIndex,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _MONERO_SubaddressAccount_setLabel(
      subaddressAccount_ptr,
      accountIndex,
      label,
    );
  }

  late final _MONERO_SubaddressAccount_setLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('MONERO_SubaddressAccount_setLabel');
  late final _MONERO_SubaddressAccount_setLabel =
      _MONERO_SubaddressAccount_setLabelPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  /// virtual void refresh() = 0;
  void MONERO_SubaddressAccount_refresh(
    ffi.Pointer<ffi.Void> subaddressAccount_ptr,
  ) {
    return _MONERO_SubaddressAccount_refresh(
      subaddressAccount_ptr,
    );
  }

  late final _MONERO_SubaddressAccount_refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_SubaddressAccount_refresh');
  late final _MONERO_SubaddressAccount_refresh =
      _MONERO_SubaddressAccount_refreshPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// bool isMultisig;
  bool MONERO_MultisigState_isMultisig(
    ffi.Pointer<ffi.Void> multisigState_ptr,
  ) {
    return _MONERO_MultisigState_isMultisig(
      multisigState_ptr,
    );
  }

  late final _MONERO_MultisigState_isMultisigPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_MultisigState_isMultisig');
  late final _MONERO_MultisigState_isMultisig =
      _MONERO_MultisigState_isMultisigPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// bool isReady;
  bool MONERO_MultisigState_isReady(
    ffi.Pointer<ffi.Void> multisigState_ptr,
  ) {
    return _MONERO_MultisigState_isReady(
      multisigState_ptr,
    );
  }

  late final _MONERO_MultisigState_isReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_MultisigState_isReady');
  late final _MONERO_MultisigState_isReady = _MONERO_MultisigState_isReadyPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// uint32_t threshold;
  int MONERO_MultisigState_threshold(
    ffi.Pointer<ffi.Void> multisigState_ptr,
  ) {
    return _MONERO_MultisigState_threshold(
      multisigState_ptr,
    );
  }

  late final _MONERO_MultisigState_thresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_MultisigState_threshold');
  late final _MONERO_MultisigState_threshold =
      _MONERO_MultisigState_thresholdPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// uint32_t total;
  int MONERO_MultisigState_total(
    ffi.Pointer<ffi.Void> multisigState_ptr,
  ) {
    return _MONERO_MultisigState_total(
      multisigState_ptr,
    );
  }

  late final _MONERO_MultisigState_totalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_MultisigState_total');
  late final _MONERO_MultisigState_total = _MONERO_MultisigState_totalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual double progress() const { return m_progress; }
  bool MONERO_DeviceProgress_progress(
    ffi.Pointer<ffi.Void> deviceProgress_ptr,
  ) {
    return _MONERO_DeviceProgress_progress(
      deviceProgress_ptr,
    );
  }

  late final _MONERO_DeviceProgress_progressPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_DeviceProgress_progress');
  late final _MONERO_DeviceProgress_progress =
      _MONERO_DeviceProgress_progressPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool indeterminate() const { return m_indeterminate; }
  bool MONERO_DeviceProgress_indeterminate(
    ffi.Pointer<ffi.Void> deviceProgress_ptr,
  ) {
    return _MONERO_DeviceProgress_indeterminate(
      deviceProgress_ptr,
    );
  }

  late final _MONERO_DeviceProgress_indeterminatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_DeviceProgress_indeterminate');
  late final _MONERO_DeviceProgress_indeterminate =
      _MONERO_DeviceProgress_indeterminatePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// struct Wallet;
  /// struct WalletListener
  /// {
  /// virtual ~WalletListener() = 0;
  /// virtual void moneySpent(const std::string &txId, uint64_t amount) = 0;
  /// virtual void moneyReceived(const std::string &txId, uint64_t amount) = 0;
  /// virtual void unconfirmedMoneyReceived(const std::string &txId, uint64_t amount) = 0;
  /// virtual void newBlock(uint64_t height) = 0;
  /// virtual void updated() = 0;
  /// virtual void refreshed() = 0;
  /// virtual void onDeviceButtonRequest(uint64_t code) { (void)code; }
  /// virtual void onDeviceButtonPressed() { }
  /// virtual optional<std::string> onDevicePinRequest() {
  /// throw std::runtime_error("Not supported");
  /// }
  /// virtual optional<std::string> onDevicePassphraseRequest(bool & on_device) {
  /// on_device = true;
  /// return optional<std::string>();
  /// }
  /// virtual void onDeviceProgress(const DeviceProgress & event) { (void)event; };
  /// virtual void onSetWallet(Wallet * wallet) { (void)wallet; };
  /// };
  /// struct Wallet
  /// {
  /// enum Device {
  /// Device_Software = 0,
  late final ffi.Pointer<ffi.Int> _WalletDevice_Software =
      _lookup<ffi.Int>('WalletDevice_Software');

  int get WalletDevice_Software => _WalletDevice_Software.value;

  /// Device_Ledger = 1,
  late final ffi.Pointer<ffi.Int> _WalletDevice_Ledger =
      _lookup<ffi.Int>('WalletDevice_Ledger');

  int get WalletDevice_Ledger => _WalletDevice_Ledger.value;

  /// Device_Trezor = 2
  late final ffi.Pointer<ffi.Int> _WalletDevice_Trezor =
      _lookup<ffi.Int>('WalletDevice_Trezor');

  int get WalletDevice_Trezor => _WalletDevice_Trezor.value;

  /// };
  /// enum Status {
  /// Status_Ok,
  late final ffi.Pointer<ffi.Int> _WalletStatus_Ok =
      _lookup<ffi.Int>('WalletStatus_Ok');

  int get WalletStatus_Ok => _WalletStatus_Ok.value;

  /// Status_Error,
  late final ffi.Pointer<ffi.Int> _WalletStatus_Error =
      _lookup<ffi.Int>('WalletStatus_Error');

  int get WalletStatus_Error => _WalletStatus_Error.value;

  /// Status_Critical
  late final ffi.Pointer<ffi.Int> _WalletStatus_Critical =
      _lookup<ffi.Int>('WalletStatus_Critical');

  int get WalletStatus_Critical => _WalletStatus_Critical.value;

  /// };
  /// enum ConnectionStatus {
  /// ConnectionStatus_Disconnected,
  late final ffi.Pointer<ffi.Int> _WalletConnectionStatus_Disconnected =
      _lookup<ffi.Int>('WalletConnectionStatus_Disconnected');

  int get WalletConnectionStatus_Disconnected =>
      _WalletConnectionStatus_Disconnected.value;

  /// ConnectionStatus_Connected,
  late final ffi.Pointer<ffi.Int> _WalletConnectionStatus_Connected =
      _lookup<ffi.Int>('WalletConnectionStatus_Connected');

  int get WalletConnectionStatus_Connected =>
      _WalletConnectionStatus_Connected.value;

  /// ConnectionStatus_WrongVersion
  late final ffi.Pointer<ffi.Int> _WalletConnectionStatus_WrongVersion =
      _lookup<ffi.Int>('WalletConnectionStatus_WrongVersion');

  int get WalletConnectionStatus_WrongVersion =>
      _WalletConnectionStatus_WrongVersion.value;

  /// };
  /// enum BackgroundSyncType {
  /// BackgroundSync_Off = 0,
  late final ffi.Pointer<ffi.Int> _WalletBackgroundSync_Off =
      _lookup<ffi.Int>('WalletBackgroundSync_Off');

  int get WalletBackgroundSync_Off => _WalletBackgroundSync_Off.value;

  /// BackgroundSync_ReusePassword = 1,
  late final ffi.Pointer<ffi.Int> _WalletBackgroundSync_ReusePassword =
      _lookup<ffi.Int>('WalletBackgroundSync_ReusePassword');

  int get WalletBackgroundSync_ReusePassword =>
      _WalletBackgroundSync_ReusePassword.value;

  /// BackgroundSync_CustomPassword = 2
  late final ffi.Pointer<ffi.Int> _BackgroundSync_CustomPassword =
      _lookup<ffi.Int>('BackgroundSync_CustomPassword');

  int get BackgroundSync_CustomPassword => _BackgroundSync_CustomPassword.value;

  /// };
  /// virtual ~Wallet() = 0;
  /// virtual std::string seed(const std::string& seed_offset = "") const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_seed(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> seed_offset,
  ) {
    return _MONERO_Wallet_seed(
      wallet_ptr,
      seed_offset,
    );
  }

  late final _MONERO_Wallet_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_seed');
  late final _MONERO_Wallet_seed = _MONERO_Wallet_seedPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string getSeedLanguage() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_getSeedLanguage(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_getSeedLanguage(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_getSeedLanguagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_getSeedLanguage');
  late final _MONERO_Wallet_getSeedLanguage = _MONERO_Wallet_getSeedLanguagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setSeedLanguage(const std::string &arg) = 0;
  void MONERO_Wallet_setSeedLanguage(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> arg,
  ) {
    return _MONERO_Wallet_setSeedLanguage(
      wallet_ptr,
      arg,
    );
  }

  late final _MONERO_Wallet_setSeedLanguagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setSeedLanguage');
  late final _MONERO_Wallet_setSeedLanguage =
      _MONERO_Wallet_setSeedLanguagePtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual int status() const = 0;
  int MONERO_Wallet_status(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_status(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_status');
  late final _MONERO_Wallet_status = _MONERO_Wallet_statusPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string errorString() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_errorString(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_errorString(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_errorStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_errorString');
  late final _MONERO_Wallet_errorString = _MONERO_Wallet_errorStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void statusWithErrorString(int& status, std::string& errorString) const = 0;
  /// virtual bool setPassword(const std::string &password) = 0;
  bool MONERO_Wallet_setPassword(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _MONERO_Wallet_setPassword(
      wallet_ptr,
      password,
    );
  }

  late final _MONERO_Wallet_setPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setPassword');
  late final _MONERO_Wallet_setPassword =
      _MONERO_Wallet_setPasswordPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual const std::string& getPassword() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_getPassword(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_getPassword(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_getPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_getPassword');
  late final _MONERO_Wallet_getPassword = _MONERO_Wallet_getPasswordPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool setDevicePin(const std::string &pin) { (void)pin; return false; };
  bool MONERO_Wallet_setDevicePin(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> pin,
  ) {
    return _MONERO_Wallet_setDevicePin(
      wallet_ptr,
      pin,
    );
  }

  late final _MONERO_Wallet_setDevicePinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setDevicePin');
  late final _MONERO_Wallet_setDevicePin =
      _MONERO_Wallet_setDevicePinPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool setDevicePassphrase(const std::string &passphrase) { (void)passphrase; return false; };
  bool MONERO_Wallet_setDevicePassphrase(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> passphrase,
  ) {
    return _MONERO_Wallet_setDevicePassphrase(
      wallet_ptr,
      passphrase,
    );
  }

  late final _MONERO_Wallet_setDevicePassphrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setDevicePassphrase');
  late final _MONERO_Wallet_setDevicePassphrase =
      _MONERO_Wallet_setDevicePassphrasePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string address(uint32_t accountIndex = 0, uint32_t addressIndex = 0) const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_address(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
    int addressIndex,
  ) {
    return _MONERO_Wallet_address(
      wallet_ptr,
      accountIndex,
      addressIndex,
    );
  }

  late final _MONERO_Wallet_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, ffi.Uint64,
              ffi.Uint64)>>('MONERO_Wallet_address');
  late final _MONERO_Wallet_address = _MONERO_Wallet_addressPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// std::string mainAddress() const { return address(0, 0); }
  /// virtual std::string path() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_path(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_path(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_path');
  late final _MONERO_Wallet_path = _MONERO_Wallet_pathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual NetworkType nettype() const = 0;
  int MONERO_Wallet_nettype(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_nettype(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_nettypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_nettype');
  late final _MONERO_Wallet_nettype = _MONERO_Wallet_nettypePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  /// bool mainnet() const { return nettype() == MAINNET; }
  /// bool testnet() const { return nettype() == TESTNET; }
  /// bool stagenet() const { return nettype() == STAGENET; }
  /// virtual void hardForkInfo(uint8_t &version, uint64_t &earliest_height) const = 0;
  /// virtual bool useForkRules(uint8_t version, int64_t early_blocks) const = 0;
  int MONERO_Wallet_useForkRules(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int version,
    int early_blocks,
  ) {
    return _MONERO_Wallet_useForkRules(
      wallet_ptr,
      version,
      early_blocks,
    );
  }

  late final _MONERO_Wallet_useForkRulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
              ffi.Int64)>>('MONERO_Wallet_useForkRules');
  late final _MONERO_Wallet_useForkRules = _MONERO_Wallet_useForkRulesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// virtual std::string integratedAddress(const std::string &payment_id) const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_integratedAddress(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> payment_id,
  ) {
    return _MONERO_Wallet_integratedAddress(
      wallet_ptr,
      payment_id,
    );
  }

  late final _MONERO_Wallet_integratedAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_integratedAddress');
  late final _MONERO_Wallet_integratedAddress =
      _MONERO_Wallet_integratedAddressPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string secretViewKey() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_secretViewKey(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_secretViewKey(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_secretViewKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_secretViewKey');
  late final _MONERO_Wallet_secretViewKey = _MONERO_Wallet_secretViewKeyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string publicViewKey() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_publicViewKey(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_publicViewKey(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_publicViewKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_publicViewKey');
  late final _MONERO_Wallet_publicViewKey = _MONERO_Wallet_publicViewKeyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string secretSpendKey() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_secretSpendKey(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_secretSpendKey(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_secretSpendKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_secretSpendKey');
  late final _MONERO_Wallet_secretSpendKey = _MONERO_Wallet_secretSpendKeyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string publicSpendKey() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_publicSpendKey(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_publicSpendKey(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_publicSpendKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_publicSpendKey');
  late final _MONERO_Wallet_publicSpendKey = _MONERO_Wallet_publicSpendKeyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string publicMultisigSignerKey() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_publicMultisigSignerKey(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_publicMultisigSignerKey(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_publicMultisigSignerKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_publicMultisigSignerKey');
  late final _MONERO_Wallet_publicMultisigSignerKey =
      _MONERO_Wallet_publicMultisigSignerKeyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void stop() = 0;
  void MONERO_Wallet_stop(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_stop(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_stop');
  late final _MONERO_Wallet_stop =
      _MONERO_Wallet_stopPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool store(const std::string &path) = 0;
  bool MONERO_Wallet_store(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _MONERO_Wallet_store(
      wallet_ptr,
      path,
    );
  }

  late final _MONERO_Wallet_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_store');
  late final _MONERO_Wallet_store = _MONERO_Wallet_storePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string filename() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_filename(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_filename(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_filename');
  late final _MONERO_Wallet_filename = _MONERO_Wallet_filenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string keysFilename() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_keysFilename(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_keysFilename(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_keysFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_keysFilename');
  late final _MONERO_Wallet_keysFilename = _MONERO_Wallet_keysFilenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool init(const std::string &daemon_address, uint64_t upper_transaction_size_limit = 0, const std::string &daemon_username = "", const std::string &daemon_password = "", bool use_ssl = false, bool lightWallet = false, const std::string &proxy_address = "") = 0;
  bool MONERO_Wallet_init(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> daemon_address,
    int upper_transaction_size_limit,
    ffi.Pointer<ffi.Char> daemon_username,
    ffi.Pointer<ffi.Char> daemon_password,
    bool use_ssl,
    bool lightWallet,
    ffi.Pointer<ffi.Char> proxy_address,
  ) {
    return _MONERO_Wallet_init(
      wallet_ptr,
      daemon_address,
      upper_transaction_size_limit,
      daemon_username,
      daemon_password,
      use_ssl,
      lightWallet,
      proxy_address,
    );
  }

  late final _MONERO_Wallet_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_init');
  late final _MONERO_Wallet_init = _MONERO_Wallet_initPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          bool,
          bool,
          ffi.Pointer<ffi.Char>)>();

  /// virtual bool createWatchOnly(const std::string &path, const std::string &password, const std::string &language) const = 0;
  bool MONERO_Wallet_createWatchOnly(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> language,
  ) {
    return _MONERO_Wallet_createWatchOnly(
      wallet_ptr,
      path,
      password,
      language,
    );
  }

  late final _MONERO_Wallet_createWatchOnlyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_createWatchOnly');
  late final _MONERO_Wallet_createWatchOnly =
      _MONERO_Wallet_createWatchOnlyPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// virtual void setRefreshFromBlockHeight(uint64_t refresh_from_block_height) = 0;
  void MONERO_Wallet_setRefreshFromBlockHeight(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int refresh_from_block_height,
  ) {
    return _MONERO_Wallet_setRefreshFromBlockHeight(
      wallet_ptr,
      refresh_from_block_height,
    );
  }

  late final _MONERO_Wallet_setRefreshFromBlockHeightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Uint64)>>('MONERO_Wallet_setRefreshFromBlockHeight');
  late final _MONERO_Wallet_setRefreshFromBlockHeight =
      _MONERO_Wallet_setRefreshFromBlockHeightPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual uint64_t getRefreshFromBlockHeight() const = 0;
  int MONERO_Wallet_getRefreshFromBlockHeight(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_getRefreshFromBlockHeight(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_getRefreshFromBlockHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_getRefreshFromBlockHeight');
  late final _MONERO_Wallet_getRefreshFromBlockHeight =
      _MONERO_Wallet_getRefreshFromBlockHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setRecoveringFromSeed(bool recoveringFromSeed) = 0;
  void MONERO_Wallet_setRecoveringFromSeed(
    ffi.Pointer<ffi.Void> wallet_ptr,
    bool recoveringFromSeed,
  ) {
    return _MONERO_Wallet_setRecoveringFromSeed(
      wallet_ptr,
      recoveringFromSeed,
    );
  }

  late final _MONERO_Wallet_setRecoveringFromSeedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>(
      'MONERO_Wallet_setRecoveringFromSeed');
  late final _MONERO_Wallet_setRecoveringFromSeed =
      _MONERO_Wallet_setRecoveringFromSeedPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, bool)>();

  /// virtual void setRecoveringFromDevice(bool recoveringFromDevice) = 0;
  void MONERO_Wallet_setRecoveringFromDevice(
    ffi.Pointer<ffi.Void> wallet_ptr,
    bool recoveringFromDevice,
  ) {
    return _MONERO_Wallet_setRecoveringFromDevice(
      wallet_ptr,
      recoveringFromDevice,
    );
  }

  late final _MONERO_Wallet_setRecoveringFromDevicePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>(
      'MONERO_Wallet_setRecoveringFromDevice');
  late final _MONERO_Wallet_setRecoveringFromDevice =
      _MONERO_Wallet_setRecoveringFromDevicePtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, bool)>();

  /// virtual void setSubaddressLookahead(uint32_t major, uint32_t minor) = 0;
  void MONERO_Wallet_setSubaddressLookahead(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int major,
    int minor,
  ) {
    return _MONERO_Wallet_setSubaddressLookahead(
      wallet_ptr,
      major,
      minor,
    );
  }

  late final _MONERO_Wallet_setSubaddressLookaheadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Uint32)>>('MONERO_Wallet_setSubaddressLookahead');
  late final _MONERO_Wallet_setSubaddressLookahead =
      _MONERO_Wallet_setSubaddressLookaheadPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// virtual bool connectToDaemon() = 0;
  bool MONERO_Wallet_connectToDaemon(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_connectToDaemon(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_connectToDaemonPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_connectToDaemon');
  late final _MONERO_Wallet_connectToDaemon = _MONERO_Wallet_connectToDaemonPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual ConnectionStatus connected() const = 0;
  int MONERO_Wallet_connected(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_connected(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_connectedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_connected');
  late final _MONERO_Wallet_connected = _MONERO_Wallet_connectedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setTrustedDaemon(bool arg) = 0;
  void MONERO_Wallet_setTrustedDaemon(
    ffi.Pointer<ffi.Void> wallet_ptr,
    bool arg,
  ) {
    return _MONERO_Wallet_setTrustedDaemon(
      wallet_ptr,
      arg,
    );
  }

  late final _MONERO_Wallet_setTrustedDaemonPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>(
      'MONERO_Wallet_setTrustedDaemon');
  late final _MONERO_Wallet_setTrustedDaemon =
      _MONERO_Wallet_setTrustedDaemonPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, bool)>();

  /// virtual bool trustedDaemon() const = 0;
  bool MONERO_Wallet_trustedDaemon(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_trustedDaemon(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_trustedDaemonPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_trustedDaemon');
  late final _MONERO_Wallet_trustedDaemon = _MONERO_Wallet_trustedDaemonPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool setProxy(const std::string &address) = 0;
  bool MONERO_Wallet_setProxy(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _MONERO_Wallet_setProxy(
      wallet_ptr,
      address,
    );
  }

  late final _MONERO_Wallet_setProxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setProxy');
  late final _MONERO_Wallet_setProxy = _MONERO_Wallet_setProxyPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual uint64_t balance(uint32_t accountIndex = 0) const = 0;
  int MONERO_Wallet_balance(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
  ) {
    return _MONERO_Wallet_balance(
      wallet_ptr,
      accountIndex,
    );
  }

  late final _MONERO_Wallet_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Void>, ffi.Uint32)>>('MONERO_Wallet_balance');
  late final _MONERO_Wallet_balance = _MONERO_Wallet_balancePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int)>();

  /// uint64_t balanceAll() const {
  /// uint64_t result = 0;
  /// for (uint32_t i = 0; i < numSubaddressAccounts(); ++i)
  /// result += balance(i);
  /// return result;
  /// }
  /// virtual uint64_t unlockedBalance(uint32_t accountIndex = 0) const = 0;
  int MONERO_Wallet_unlockedBalance(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
  ) {
    return _MONERO_Wallet_unlockedBalance(
      wallet_ptr,
      accountIndex,
    );
  }

  late final _MONERO_Wallet_unlockedBalancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('MONERO_Wallet_unlockedBalance');
  late final _MONERO_Wallet_unlockedBalance = _MONERO_Wallet_unlockedBalancePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// uint64_t unlockedBalanceAll() const {
  /// uint64_t result = 0;
  /// for (uint32_t i = 0; i < numSubaddressAccounts(); ++i)
  /// result += unlockedBalance(i);
  /// return result;
  /// }
  /// virtual bool watchOnly() const = 0;
  /// virtual uint64_t viewOnlyBalance(uint32_t accountIndex, const std::vector<std::string> &key_images = {}) const = 0;
  int MONERO_Wallet_viewOnlyBalance(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
  ) {
    return _MONERO_Wallet_viewOnlyBalance(
      wallet_ptr,
      accountIndex,
    );
  }

  late final _MONERO_Wallet_viewOnlyBalancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('MONERO_Wallet_viewOnlyBalance');
  late final _MONERO_Wallet_viewOnlyBalance = _MONERO_Wallet_viewOnlyBalancePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  bool MONERO_Wallet_watchOnly(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_watchOnly(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_watchOnlyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_watchOnly');
  late final _MONERO_Wallet_watchOnly = _MONERO_Wallet_watchOnlyPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool isDeterministic() const = 0;
  bool MONERO_Wallet_isDeterministic(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_isDeterministic(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_isDeterministicPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_isDeterministic');
  late final _MONERO_Wallet_isDeterministic = _MONERO_Wallet_isDeterministicPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t blockChainHeight() const = 0;
  int MONERO_Wallet_blockChainHeight(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_blockChainHeight(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_blockChainHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_blockChainHeight');
  late final _MONERO_Wallet_blockChainHeight =
      _MONERO_Wallet_blockChainHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t approximateBlockChainHeight() const = 0;
  int MONERO_Wallet_approximateBlockChainHeight(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_approximateBlockChainHeight(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_approximateBlockChainHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_approximateBlockChainHeight');
  late final _MONERO_Wallet_approximateBlockChainHeight =
      _MONERO_Wallet_approximateBlockChainHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t estimateBlockChainHeight() const = 0;
  int MONERO_Wallet_estimateBlockChainHeight(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_estimateBlockChainHeight(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_estimateBlockChainHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_estimateBlockChainHeight');
  late final _MONERO_Wallet_estimateBlockChainHeight =
      _MONERO_Wallet_estimateBlockChainHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t daemonBlockChainHeight() const = 0;
  int MONERO_Wallet_daemonBlockChainHeight(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_daemonBlockChainHeight(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_daemonBlockChainHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_daemonBlockChainHeight');
  late final _MONERO_Wallet_daemonBlockChainHeight =
      _MONERO_Wallet_daemonBlockChainHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  int MONERO_Wallet_daemonBlockChainHeight_cached(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_daemonBlockChainHeight_cached(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_daemonBlockChainHeight_cachedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_daemonBlockChainHeight_cached');
  late final _MONERO_Wallet_daemonBlockChainHeight_cached =
      _MONERO_Wallet_daemonBlockChainHeight_cachedPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  void MONERO_Wallet_daemonBlockChainHeight_runThread(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int seconds,
  ) {
    return _MONERO_Wallet_daemonBlockChainHeight_runThread(
      wallet_ptr,
      seconds,
    );
  }

  late final _MONERO_Wallet_daemonBlockChainHeight_runThreadPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'MONERO_Wallet_daemonBlockChainHeight_runThread');
  late final _MONERO_Wallet_daemonBlockChainHeight_runThread =
      _MONERO_Wallet_daemonBlockChainHeight_runThreadPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual uint64_t daemonBlockChainTargetHeight() const = 0;
  int MONERO_Wallet_daemonBlockChainTargetHeight(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_daemonBlockChainTargetHeight(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_daemonBlockChainTargetHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_daemonBlockChainTargetHeight');
  late final _MONERO_Wallet_daemonBlockChainTargetHeight =
      _MONERO_Wallet_daemonBlockChainTargetHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool synchronized() const = 0;
  bool MONERO_Wallet_synchronized(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_synchronized(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_synchronizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_synchronized');
  late final _MONERO_Wallet_synchronized = _MONERO_Wallet_synchronizedPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// static std::string displayAmount(uint64_t amount);
  ffi.Pointer<ffi.Char> MONERO_Wallet_displayAmount(
    int amount,
  ) {
    return _MONERO_Wallet_displayAmount(
      amount,
    );
  }

  late final _MONERO_Wallet_displayAmountPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint64)>>(
          'MONERO_Wallet_displayAmount');
  late final _MONERO_Wallet_displayAmount = _MONERO_Wallet_displayAmountPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// static uint64_t amountFromString(const std::string &amount);
  int MONERO_Wallet_amountFromString(
    ffi.Pointer<ffi.Char> amount,
  ) {
    return _MONERO_Wallet_amountFromString(
      amount,
    );
  }

  late final _MONERO_Wallet_amountFromStringPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Char>)>>(
          'MONERO_Wallet_amountFromString');
  late final _MONERO_Wallet_amountFromString =
      _MONERO_Wallet_amountFromStringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>)>();

  /// static uint64_t amountFromDouble(double amount);
  int MONERO_Wallet_amountFromDouble(
    double amount,
  ) {
    return _MONERO_Wallet_amountFromDouble(
      amount,
    );
  }

  late final _MONERO_Wallet_amountFromDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Double)>>(
          'MONERO_Wallet_amountFromDouble');
  late final _MONERO_Wallet_amountFromDouble =
      _MONERO_Wallet_amountFromDoublePtr.asFunction<int Function(double)>();

  /// static std::string genPaymentId();
  ffi.Pointer<ffi.Char> MONERO_Wallet_genPaymentId() {
    return _MONERO_Wallet_genPaymentId();
  }

  late final _MONERO_Wallet_genPaymentIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'MONERO_Wallet_genPaymentId');
  late final _MONERO_Wallet_genPaymentId = _MONERO_Wallet_genPaymentIdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// static bool paymentIdValid(const std::string &paiment_id);
  bool MONERO_Wallet_paymentIdValid(
    ffi.Pointer<ffi.Char> paiment_id,
  ) {
    return _MONERO_Wallet_paymentIdValid(
      paiment_id,
    );
  }

  late final _MONERO_Wallet_paymentIdValidPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'MONERO_Wallet_paymentIdValid');
  late final _MONERO_Wallet_paymentIdValid = _MONERO_Wallet_paymentIdValidPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  /// static bool addressValid(const std::string &str, NetworkType nettype);
  bool MONERO_Wallet_addressValid(
    ffi.Pointer<ffi.Char> str,
    int nettype,
  ) {
    return _MONERO_Wallet_addressValid(
      str,
      nettype,
    );
  }

  late final _MONERO_Wallet_addressValidPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'MONERO_Wallet_addressValid');
  late final _MONERO_Wallet_addressValid = _MONERO_Wallet_addressValidPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  /// static bool addressValid(const std::string &str, bool testnet)          // deprecated
  /// {
  /// return addressValid(str, testnet ? TESTNET : MAINNET);
  /// }
  bool MONERO_Wallet_keyValid(
    ffi.Pointer<ffi.Char> secret_key_string,
    ffi.Pointer<ffi.Char> address_string,
    bool isViewKey,
    int nettype,
  ) {
    return _MONERO_Wallet_keyValid(
      secret_key_string,
      address_string,
      isViewKey,
      nettype,
    );
  }

  late final _MONERO_Wallet_keyValidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Bool, ffi.Int)>>('MONERO_Wallet_keyValid');
  late final _MONERO_Wallet_keyValid = _MONERO_Wallet_keyValidPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool, int)>();

  ffi.Pointer<ffi.Char> MONERO_Wallet_keyValid_error(
    ffi.Pointer<ffi.Char> secret_key_string,
    ffi.Pointer<ffi.Char> address_string,
    bool isViewKey,
    int nettype,
  ) {
    return _MONERO_Wallet_keyValid_error(
      secret_key_string,
      address_string,
      isViewKey,
      nettype,
    );
  }

  late final _MONERO_Wallet_keyValid_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Int)>>('MONERO_Wallet_keyValid_error');
  late final _MONERO_Wallet_keyValid_error =
      _MONERO_Wallet_keyValid_errorPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool, int)>();

  /// static bool keyValid(const std::string &secret_key_string, const std::string &address_string, bool isViewKey, NetworkType nettype, std::string &error);
  /// static bool keyValid(const std::string &secret_key_string, const std::string &address_string, bool isViewKey, bool testnet, std::string &error)     // deprecated
  /// {
  /// return keyValid(secret_key_string, address_string, isViewKey, testnet ? TESTNET : MAINNET, error);
  /// }
  /// static std::string paymentIdFromAddress(const std::string &str, NetworkType nettype);
  ffi.Pointer<ffi.Char> MONERO_Wallet_paymentIdFromAddress(
    ffi.Pointer<ffi.Char> strarg,
    int nettype,
  ) {
    return _MONERO_Wallet_paymentIdFromAddress(
      strarg,
      nettype,
    );
  }

  late final _MONERO_Wallet_paymentIdFromAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Int)>>('MONERO_Wallet_paymentIdFromAddress');
  late final _MONERO_Wallet_paymentIdFromAddress =
      _MONERO_Wallet_paymentIdFromAddressPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  /// static std::string paymentIdFromAddress(const std::string &str, bool testnet)       // deprecated
  /// {
  /// return paymentIdFromAddress(str, testnet ? TESTNET : MAINNET);
  /// }
  /// static uint64_t maximumAllowedAmount();
  int MONERO_Wallet_maximumAllowedAmount() {
    return _MONERO_Wallet_maximumAllowedAmount();
  }

  late final _MONERO_Wallet_maximumAllowedAmountPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'MONERO_Wallet_maximumAllowedAmount');
  late final _MONERO_Wallet_maximumAllowedAmount =
      _MONERO_Wallet_maximumAllowedAmountPtr.asFunction<int Function()>();

  /// static void init(const char *argv0, const char *default_log_base_name) { init(argv0, default_log_base_name, "", true); }
  /// static void init(const char *argv0, const char *default_log_base_name, const std::string &log_path, bool console);
  void MONERO_Wallet_init3(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> argv0,
    ffi.Pointer<ffi.Char> default_log_base_name,
    ffi.Pointer<ffi.Char> log_path,
    bool console,
  ) {
    return _MONERO_Wallet_init3(
      wallet_ptr,
      argv0,
      default_log_base_name,
      log_path,
      console,
    );
  }

  late final _MONERO_Wallet_init3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('MONERO_Wallet_init3');
  late final _MONERO_Wallet_init3 = _MONERO_Wallet_init3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool)>();

  /// static void debug(const std::string &category, const std::string &str);
  /// static void info(const std::string &category, const std::string &str);
  /// static void warning(const std::string &category, const std::string &str);
  /// static void error(const std::string &category, const std::string &str);
  /// virtual void startRefresh() = 0;
  /// virtual bool getPolyseed(std::string &seed, std::string &passphrase) const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_getPolyseed(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> passphrase,
  ) {
    return _MONERO_Wallet_getPolyseed(
      wallet_ptr,
      passphrase,
    );
  }

  late final _MONERO_Wallet_getPolyseedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_getPolyseed');
  late final _MONERO_Wallet_getPolyseed =
      _MONERO_Wallet_getPolyseedPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// static bool createPolyseed(std::string &seed_words, std::string &err, const std::string &language = "English");
  ffi.Pointer<ffi.Char> MONERO_Wallet_createPolyseed(
    ffi.Pointer<ffi.Char> language,
  ) {
    return _MONERO_Wallet_createPolyseed(
      language,
    );
  }

  late final _MONERO_Wallet_createPolyseedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_createPolyseed');
  late final _MONERO_Wallet_createPolyseed = _MONERO_Wallet_createPolyseedPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void MONERO_Wallet_startRefresh(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_startRefresh(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_startRefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_startRefresh');
  late final _MONERO_Wallet_startRefresh = _MONERO_Wallet_startRefreshPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void pauseRefresh() = 0;
  void MONERO_Wallet_pauseRefresh(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_pauseRefresh(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_pauseRefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_pauseRefresh');
  late final _MONERO_Wallet_pauseRefresh = _MONERO_Wallet_pauseRefreshPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool refresh() = 0;
  bool MONERO_Wallet_refresh(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_refresh(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_refreshPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_refresh');
  late final _MONERO_Wallet_refresh = _MONERO_Wallet_refreshPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void refreshAsync() = 0;
  void MONERO_Wallet_refreshAsync(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_refreshAsync(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_refreshAsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_refreshAsync');
  late final _MONERO_Wallet_refreshAsync = _MONERO_Wallet_refreshAsyncPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool rescanBlockchain() = 0;
  bool MONERO_Wallet_rescanBlockchain(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_rescanBlockchain(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_rescanBlockchainPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_rescanBlockchain');
  late final _MONERO_Wallet_rescanBlockchain =
      _MONERO_Wallet_rescanBlockchainPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void rescanBlockchainAsync() = 0;
  void MONERO_Wallet_rescanBlockchainAsync(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_rescanBlockchainAsync(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_rescanBlockchainAsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_rescanBlockchainAsync');
  late final _MONERO_Wallet_rescanBlockchainAsync =
      _MONERO_Wallet_rescanBlockchainAsyncPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setAutoRefreshInterval(int millis) = 0;
  void MONERO_Wallet_setAutoRefreshInterval(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int millis,
  ) {
    return _MONERO_Wallet_setAutoRefreshInterval(
      wallet_ptr,
      millis,
    );
  }

  late final _MONERO_Wallet_setAutoRefreshIntervalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'MONERO_Wallet_setAutoRefreshInterval');
  late final _MONERO_Wallet_setAutoRefreshInterval =
      _MONERO_Wallet_setAutoRefreshIntervalPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual int autoRefreshInterval() const = 0;
  int MONERO_Wallet_autoRefreshInterval(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_autoRefreshInterval(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_autoRefreshIntervalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_autoRefreshInterval');
  late final _MONERO_Wallet_autoRefreshInterval =
      _MONERO_Wallet_autoRefreshIntervalPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void addSubaddressAccount(const std::string& label) = 0;
  void MONERO_Wallet_addSubaddressAccount(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _MONERO_Wallet_addSubaddressAccount(
      wallet_ptr,
      label,
    );
  }

  late final _MONERO_Wallet_addSubaddressAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_addSubaddressAccount');
  late final _MONERO_Wallet_addSubaddressAccount =
      _MONERO_Wallet_addSubaddressAccountPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual size_t numSubaddressAccounts() const = 0;
  int MONERO_Wallet_numSubaddressAccounts(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_numSubaddressAccounts(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_numSubaddressAccountsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_numSubaddressAccounts');
  late final _MONERO_Wallet_numSubaddressAccounts =
      _MONERO_Wallet_numSubaddressAccountsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual size_t numSubaddresses(uint32_t accountIndex) const = 0;
  int MONERO_Wallet_numSubaddresses(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
  ) {
    return _MONERO_Wallet_numSubaddresses(
      wallet_ptr,
      accountIndex,
    );
  }

  late final _MONERO_Wallet_numSubaddressesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('MONERO_Wallet_numSubaddresses');
  late final _MONERO_Wallet_numSubaddresses = _MONERO_Wallet_numSubaddressesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual void addSubaddress(uint32_t accountIndex, const std::string& label) = 0;
  void MONERO_Wallet_addSubaddress(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _MONERO_Wallet_addSubaddress(
      wallet_ptr,
      accountIndex,
      label,
    );
  }

  late final _MONERO_Wallet_addSubaddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_addSubaddress');
  late final _MONERO_Wallet_addSubaddress =
      _MONERO_Wallet_addSubaddressPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string getSubaddressLabel(uint32_t accountIndex, uint32_t addressIndex) const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_getSubaddressLabel(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
    int addressIndex,
  ) {
    return _MONERO_Wallet_getSubaddressLabel(
      wallet_ptr,
      accountIndex,
      addressIndex,
    );
  }

  late final _MONERO_Wallet_getSubaddressLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Uint32)>>('MONERO_Wallet_getSubaddressLabel');
  late final _MONERO_Wallet_getSubaddressLabel =
      _MONERO_Wallet_getSubaddressLabelPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// virtual void setSubaddressLabel(uint32_t accountIndex, uint32_t addressIndex, const std::string &label) = 0;
  void MONERO_Wallet_setSubaddressLabel(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
    int addressIndex,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _MONERO_Wallet_setSubaddressLabel(
      wallet_ptr,
      accountIndex,
      addressIndex,
      label,
    );
  }

  late final _MONERO_Wallet_setSubaddressLabelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setSubaddressLabel');
  late final _MONERO_Wallet_setSubaddressLabel =
      _MONERO_Wallet_setSubaddressLabelPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>)>();

  /// virtual MultisigState multisig() const = 0;
  /// virtual std::string getMultisigInfo() const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_getMultisigInfo(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_getMultisigInfo(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_getMultisigInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_getMultisigInfo');
  late final _MONERO_Wallet_getMultisigInfo = _MONERO_Wallet_getMultisigInfoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual std::string makeMultisig(const std::vector<std::string>& info, uint32_t threshold) = 0;
  /// virtual std::string exchangeMultisigKeys(const std::vector<std::string> &info, const bool force_update_use_with_caution) = 0;
  /// virtual bool exportMultisigImages(std::string& images) = 0;
  /// virtual size_t importMultisigImages(const std::vector<std::string>& images) = 0;
  /// virtual bool hasMultisigPartialKeyImages() const = 0;
  /// virtual PendingTransaction*  restoreMultisigTransaction(const std::string& signData) = 0;
  /// virtual PendingTransaction * createTransactionMultDest(const std::vector<std::string> &dst_addr, const std::string &payment_id,
  /// optional<std::vector<uint64_t>> amount, uint32_t mixin_count,
  /// PendingTransaction::Priority = PendingTransaction::Priority_Low,
  /// uint32_t subaddr_account = 0,
  /// std::set<uint32_t> subaddr_indices = {}) = 0;
  /// virtual PendingTransaction * createTransaction(const std::string &dst_addr, const std::string &payment_id,
  /// optional<uint64_t> amount, uint32_t mixin_count,
  /// PendingTransaction::Priority = PendingTransaction::Priority_Low,
  /// uint32_t subaddr_account = 0,
  /// std::set<uint32_t> subaddr_indices = {},
  /// const std::set<std::string> &preferred_inputs = {) = 0;
  ffi.Pointer<ffi.Void> MONERO_Wallet_createTransaction(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> dst_addr,
    ffi.Pointer<ffi.Char> payment_id,
    int amount,
    int mixin_count,
    int pendingTransactionPriority,
    int subaddr_account,
    ffi.Pointer<ffi.Char> preferredInputs,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_Wallet_createTransaction(
      wallet_ptr,
      dst_addr,
      payment_id,
      amount,
      mixin_count,
      pendingTransactionPriority,
      subaddr_account,
      preferredInputs,
      separator,
    );
  }

  late final _MONERO_Wallet_createTransactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Int,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_createTransaction');
  late final _MONERO_Wallet_createTransaction =
      _MONERO_Wallet_createTransactionPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// virtual PendingTransaction * createSweepUnmixableTransaction() = 0;
  /// virtual UnsignedTransaction * loadUnsignedTx(const std::string &unsigned_filename) = 0;
  ffi.Pointer<ffi.Void> MONERO_Wallet_loadUnsignedTx(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> unsigned_filename,
  ) {
    return _MONERO_Wallet_loadUnsignedTx(
      wallet_ptr,
      unsigned_filename,
    );
  }

  late final _MONERO_Wallet_loadUnsignedTxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_loadUnsignedTx');
  late final _MONERO_Wallet_loadUnsignedTx =
      _MONERO_Wallet_loadUnsignedTxPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool submitTransaction(const std::string &fileName) = 0;
  bool MONERO_Wallet_submitTransaction(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _MONERO_Wallet_submitTransaction(
      wallet_ptr,
      fileName,
    );
  }

  late final _MONERO_Wallet_submitTransactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_submitTransaction');
  late final _MONERO_Wallet_submitTransaction =
      _MONERO_Wallet_submitTransactionPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual void disposeTransaction(PendingTransaction * t) = 0;
  /// virtual uint64_t estimateTransactionFee(const std::vector<std::pair<std::string, uint64_t>> &destinations,
  /// PendingTransaction::Priority priority) const = 0;
  /// virtual bool hasUnknownKeyImages() const = 0;
  bool MONERO_Wallet_hasUnknownKeyImages(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_hasUnknownKeyImages(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_hasUnknownKeyImagesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_hasUnknownKeyImages');
  late final _MONERO_Wallet_hasUnknownKeyImages =
      _MONERO_Wallet_hasUnknownKeyImagesPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool exportKeyImages(const std::string &filename, bool all = false) = 0;
  bool MONERO_Wallet_exportKeyImages(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> filename,
    bool all,
  ) {
    return _MONERO_Wallet_exportKeyImages(
      wallet_ptr,
      filename,
      all,
    );
  }

  late final _MONERO_Wallet_exportKeyImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('MONERO_Wallet_exportKeyImages');
  late final _MONERO_Wallet_exportKeyImages =
      _MONERO_Wallet_exportKeyImagesPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, bool)>();

  /// virtual bool importKeyImages(const std::string &filename) = 0;
  bool MONERO_Wallet_importKeyImages(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _MONERO_Wallet_importKeyImages(
      wallet_ptr,
      filename,
    );
  }

  late final _MONERO_Wallet_importKeyImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_importKeyImages');
  late final _MONERO_Wallet_importKeyImages =
      _MONERO_Wallet_importKeyImagesPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool exportOutputs(const std::string &filename, bool all = false) = 0;
  bool MONERO_Wallet_exportOutputs(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> filename,
    bool all,
  ) {
    return _MONERO_Wallet_exportOutputs(
      wallet_ptr,
      filename,
      all,
    );
  }

  late final _MONERO_Wallet_exportOutputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('MONERO_Wallet_exportOutputs');
  late final _MONERO_Wallet_exportOutputs =
      _MONERO_Wallet_exportOutputsPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, bool)>();

  /// virtual bool importOutputs(const std::string &filename) = 0;
  bool MONERO_Wallet_importOutputs(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _MONERO_Wallet_importOutputs(
      wallet_ptr,
      filename,
    );
  }

  late final _MONERO_Wallet_importOutputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_importOutputs');
  late final _MONERO_Wallet_importOutputs =
      _MONERO_Wallet_importOutputsPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool scanTransactions(const std::vector<std::string> &txids) = 0;
  /// virtual bool setupBackgroundSync(const BackgroundSyncType background_sync_type, const std::string &wallet_password, const optional<std::string> &background_cache_password) = 0;
  bool MONERO_Wallet_setupBackgroundSync(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int background_sync_type,
    ffi.Pointer<ffi.Char> wallet_password,
    ffi.Pointer<ffi.Char> background_cache_password,
  ) {
    return _MONERO_Wallet_setupBackgroundSync(
      wallet_ptr,
      background_sync_type,
      wallet_password,
      background_cache_password,
    );
  }

  late final _MONERO_Wallet_setupBackgroundSyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setupBackgroundSync');
  late final _MONERO_Wallet_setupBackgroundSync =
      _MONERO_Wallet_setupBackgroundSyncPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// virtual BackgroundSyncType getBackgroundSyncType() const = 0;
  int MONERO_Wallet_getBackgroundSyncType(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_getBackgroundSyncType(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_getBackgroundSyncTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_getBackgroundSyncType');
  late final _MONERO_Wallet_getBackgroundSyncType =
      _MONERO_Wallet_getBackgroundSyncTypePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool startBackgroundSync() = 0;
  bool MONERO_Wallet_startBackgroundSync(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_startBackgroundSync(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_startBackgroundSyncPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_startBackgroundSync');
  late final _MONERO_Wallet_startBackgroundSync =
      _MONERO_Wallet_startBackgroundSyncPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool stopBackgroundSync(const std::string &wallet_password) = 0;
  bool MONERO_Wallet_stopBackgroundSync(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> wallet_password,
  ) {
    return _MONERO_Wallet_stopBackgroundSync(
      wallet_ptr,
      wallet_password,
    );
  }

  late final _MONERO_Wallet_stopBackgroundSyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_stopBackgroundSync');
  late final _MONERO_Wallet_stopBackgroundSync =
      _MONERO_Wallet_stopBackgroundSyncPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool isBackgroundSyncing() const = 0;
  bool MONERO_Wallet_isBackgroundSyncing(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_isBackgroundSyncing(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_isBackgroundSyncingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_isBackgroundSyncing');
  late final _MONERO_Wallet_isBackgroundSyncing =
      _MONERO_Wallet_isBackgroundSyncingPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool isBackgroundWallet() const = 0;
  bool MONERO_Wallet_isBackgroundWallet(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_isBackgroundWallet(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_isBackgroundWalletPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_isBackgroundWallet');
  late final _MONERO_Wallet_isBackgroundWallet =
      _MONERO_Wallet_isBackgroundWalletPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual TransactionHistory * history() = 0;
  ffi.Pointer<ffi.Void> MONERO_Wallet_history(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_history(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_historyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_history');
  late final _MONERO_Wallet_history = _MONERO_Wallet_historyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual AddressBook * addressBook() = 0;
  ffi.Pointer<ffi.Void> MONERO_Wallet_addressBook(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_addressBook(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_addressBookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_addressBook');
  late final _MONERO_Wallet_addressBook = _MONERO_Wallet_addressBookPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual Coins * coins() = 0;
  ffi.Pointer<ffi.Void> MONERO_Wallet_coins(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_coins(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_coinsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_coins');
  late final _MONERO_Wallet_coins = _MONERO_Wallet_coinsPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual Subaddress * subaddress() = 0;
  ffi.Pointer<ffi.Void> MONERO_Wallet_subaddress(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_subaddress(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_subaddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_subaddress');
  late final _MONERO_Wallet_subaddress = _MONERO_Wallet_subaddressPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual SubaddressAccount * subaddressAccount() = 0;
  ffi.Pointer<ffi.Void> MONERO_Wallet_subaddressAccount(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_subaddressAccount(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_subaddressAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_subaddressAccount');
  late final _MONERO_Wallet_subaddressAccount =
      _MONERO_Wallet_subaddressAccountPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setListener(WalletListener *) = 0;
  /// virtual uint32_t defaultMixin() const = 0;
  int MONERO_Wallet_defaultMixin(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_defaultMixin(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_defaultMixinPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_defaultMixin');
  late final _MONERO_Wallet_defaultMixin = _MONERO_Wallet_defaultMixinPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setDefaultMixin(uint32_t arg) = 0;
  void MONERO_Wallet_setDefaultMixin(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int arg,
  ) {
    return _MONERO_Wallet_setDefaultMixin(
      wallet_ptr,
      arg,
    );
  }

  late final _MONERO_Wallet_setDefaultMixinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('MONERO_Wallet_setDefaultMixin');
  late final _MONERO_Wallet_setDefaultMixin = _MONERO_Wallet_setDefaultMixinPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual bool setCacheAttribute(const std::string &key, const std::string &val) = 0;
  bool MONERO_Wallet_setCacheAttribute(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _MONERO_Wallet_setCacheAttribute(
      wallet_ptr,
      key,
      val,
    );
  }

  late final _MONERO_Wallet_setCacheAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setCacheAttribute');
  late final _MONERO_Wallet_setCacheAttribute =
      _MONERO_Wallet_setCacheAttributePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// virtual std::string getCacheAttribute(const std::string &key) const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_getCacheAttribute(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _MONERO_Wallet_getCacheAttribute(
      wallet_ptr,
      key,
    );
  }

  late final _MONERO_Wallet_getCacheAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_getCacheAttribute');
  late final _MONERO_Wallet_getCacheAttribute =
      _MONERO_Wallet_getCacheAttributePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool setUserNote(const std::string &txid, const std::string &note) = 0;
  bool MONERO_Wallet_setUserNote(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> txid,
    ffi.Pointer<ffi.Char> note,
  ) {
    return _MONERO_Wallet_setUserNote(
      wallet_ptr,
      txid,
      note,
    );
  }

  late final _MONERO_Wallet_setUserNotePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_setUserNote');
  late final _MONERO_Wallet_setUserNote =
      _MONERO_Wallet_setUserNotePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// virtual std::string getUserNote(const std::string &txid) const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_getUserNote(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> txid,
  ) {
    return _MONERO_Wallet_getUserNote(
      wallet_ptr,
      txid,
    );
  }

  late final _MONERO_Wallet_getUserNotePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_getUserNote');
  late final _MONERO_Wallet_getUserNote =
      _MONERO_Wallet_getUserNotePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string getTxKey(const std::string &txid) const = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_getTxKey(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> txid,
  ) {
    return _MONERO_Wallet_getTxKey(
      wallet_ptr,
      txid,
    );
  }

  late final _MONERO_Wallet_getTxKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_getTxKey');
  late final _MONERO_Wallet_getTxKey = _MONERO_Wallet_getTxKeyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool checkTxKey(const std::string &txid, std::string tx_key, const std::string &address, uint64_t &received, bool &in_pool, uint64_t &confirmations) = 0;
  /// virtual std::string getTxProof(const std::string &txid, const std::string &address, const std::string &message) const = 0;
  /// virtual bool checkTxProof(const std::string &txid, const std::string &address, const std::string &message, const std::string &signature, bool &good, uint64_t &received, bool &in_pool, uint64_t &confirmations) = 0;
  /// virtual std::string getSpendProof(const std::string &txid, const std::string &message) const = 0;
  /// virtual bool checkSpendProof(const std::string &txid, const std::string &message, const std::string &signature, bool &good) const = 0;
  /// virtual std::string getReserveProof(bool all, uint32_t account_index, uint64_t amount, const std::string &message) const = 0;
  /// virtual bool checkReserveProof(const std::string &address, const std::string &message, const std::string &signature, bool &good, uint64_t &total, uint64_t &spent) const = 0;
  /// virtual std::string signMessage(const std::string &message, const std::string &address = "") = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_signMessage(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _MONERO_Wallet_signMessage(
      wallet_ptr,
      message,
      address,
    );
  }

  late final _MONERO_Wallet_signMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_signMessage');
  late final _MONERO_Wallet_signMessage =
      _MONERO_Wallet_signMessagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool verifySignedMessage(const std::string &message, const std::string &addres, const std::string &signature) const = 0;
  bool MONERO_Wallet_verifySignedMessage(
    ffi.Pointer<ffi.Void> wallet_ptr,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> address,
    ffi.Pointer<ffi.Char> signature,
  ) {
    return _MONERO_Wallet_verifySignedMessage(
      wallet_ptr,
      message,
      address,
      signature,
    );
  }

  late final _MONERO_Wallet_verifySignedMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_Wallet_verifySignedMessage');
  late final _MONERO_Wallet_verifySignedMessage =
      _MONERO_Wallet_verifySignedMessagePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string signMultisigParticipant(const std::string &message) const = 0;
  /// virtual bool verifyMessageWithPublicKey(const std::string &message, const std::string &publicKey, const std::string &signature) const = 0;
  /// virtual bool parse_uri(const std::string &uri, std::string &address, std::string &payment_id, uint64_t &amount, std::string &tx_description, std::string &recipient_name, std::vector<std::string> &unknown_parameters, std::string &error) = 0;
  /// virtual std::string make_uri(const std::string &address, const std::string &payment_id, uint64_t amount, const std::string &tx_description, const std::string &recipient_name, std::string &error) const = 0;
  /// virtual std::string getDefaultDataDir() const = 0;
  /// virtual bool rescanSpent() = 0;
  bool MONERO_Wallet_rescanSpent(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_rescanSpent(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_rescanSpentPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_rescanSpent');
  late final _MONERO_Wallet_rescanSpent = _MONERO_Wallet_rescanSpentPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setOffline(bool offline) = 0;
  void MONERO_Wallet_setOffline(
    ffi.Pointer<ffi.Void> wallet_ptr,
    bool offline,
  ) {
    return _MONERO_Wallet_setOffline(
      wallet_ptr,
      offline,
    );
  }

  late final _MONERO_Wallet_setOfflinePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>(
      'MONERO_Wallet_setOffline');
  late final _MONERO_Wallet_setOffline = _MONERO_Wallet_setOfflinePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, bool)>();

  /// virtual bool isOffline() const = 0;
  bool MONERO_Wallet_isOffline(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_isOffline(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_isOfflinePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_isOffline');
  late final _MONERO_Wallet_isOffline = _MONERO_Wallet_isOfflinePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool blackballOutputs(const std::vector<std::string> &outputs, bool add) = 0;
  /// virtual bool blackballOutput(const std::string &amount, const std::string &offset) = 0;
  /// virtual bool unblackballOutput(const std::string &amount, const std::string &offset) = 0;
  /// virtual bool getRing(const std::string &key_image, std::vector<uint64_t> &ring) const = 0;
  /// virtual bool getRings(const std::string &txid, std::vector<std::pair<std::string, std::vector<uint64_t>>> &rings) const = 0;
  /// virtual bool setRing(const std::string &key_image, const std::vector<uint64_t> &ring, bool relative) = 0;
  /// virtual void segregatePreForkOutputs(bool segregate) = 0;
  void MONERO_Wallet_segregatePreForkOutputs(
    ffi.Pointer<ffi.Void> wallet_ptr,
    bool segregate,
  ) {
    return _MONERO_Wallet_segregatePreForkOutputs(
      wallet_ptr,
      segregate,
    );
  }

  late final _MONERO_Wallet_segregatePreForkOutputsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>(
      'MONERO_Wallet_segregatePreForkOutputs');
  late final _MONERO_Wallet_segregatePreForkOutputs =
      _MONERO_Wallet_segregatePreForkOutputsPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, bool)>();

  /// virtual void segregationHeight(uint64_t height) = 0;
  void MONERO_Wallet_segregationHeight(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int height,
  ) {
    return _MONERO_Wallet_segregationHeight(
      wallet_ptr,
      height,
    );
  }

  late final _MONERO_Wallet_segregationHeightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Uint64)>>('MONERO_Wallet_segregationHeight');
  late final _MONERO_Wallet_segregationHeight =
      _MONERO_Wallet_segregationHeightPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int)>();

  /// virtual void keyReuseMitigation2(bool mitigation) = 0;
  void MONERO_Wallet_keyReuseMitigation2(
    ffi.Pointer<ffi.Void> wallet_ptr,
    bool mitigation,
  ) {
    return _MONERO_Wallet_keyReuseMitigation2(
      wallet_ptr,
      mitigation,
    );
  }

  late final _MONERO_Wallet_keyReuseMitigation2Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Bool)>>(
      'MONERO_Wallet_keyReuseMitigation2');
  late final _MONERO_Wallet_keyReuseMitigation2 =
      _MONERO_Wallet_keyReuseMitigation2Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, bool)>();

  /// virtual bool lightWalletLogin(bool &isNewWallet) const = 0;
  /// virtual bool lightWalletImportWalletRequest(std::string &payment_id, uint64_t &fee, bool &new_request, bool &request_fulfilled, std::string &payment_address, std::string &status) = 0;
  /// virtual bool lockKeysFile() = 0;
  bool MONERO_Wallet_lockKeysFile(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_lockKeysFile(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_lockKeysFilePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_lockKeysFile');
  late final _MONERO_Wallet_lockKeysFile = _MONERO_Wallet_lockKeysFilePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool unlockKeysFile() = 0;
  bool MONERO_Wallet_unlockKeysFile(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_unlockKeysFile(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_unlockKeysFilePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_unlockKeysFile');
  late final _MONERO_Wallet_unlockKeysFile = _MONERO_Wallet_unlockKeysFilePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool isKeysFileLocked() = 0;
  bool MONERO_Wallet_isKeysFileLocked(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_isKeysFileLocked(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_isKeysFileLockedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_isKeysFileLocked');
  late final _MONERO_Wallet_isKeysFileLocked =
      _MONERO_Wallet_isKeysFileLockedPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual Device getDeviceType() const = 0;
  int MONERO_Wallet_getDeviceType(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_getDeviceType(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_getDeviceTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_getDeviceType');
  late final _MONERO_Wallet_getDeviceType = _MONERO_Wallet_getDeviceTypePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t coldKeyImageSync(uint64_t &spent, uint64_t &unspent) = 0;
  int MONERO_Wallet_coldKeyImageSync(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int spent,
    int unspent,
  ) {
    return _MONERO_Wallet_coldKeyImageSync(
      wallet_ptr,
      spent,
      unspent,
    );
  }

  late final _MONERO_Wallet_coldKeyImageSyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, ffi.Uint64,
              ffi.Uint64)>>('MONERO_Wallet_coldKeyImageSync');
  late final _MONERO_Wallet_coldKeyImageSync =
      _MONERO_Wallet_coldKeyImageSyncPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// virtual void deviceShowAddress(uint32_t accountIndex, uint32_t addressIndex, const std::string &paymentId) = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_deviceShowAddress(
    ffi.Pointer<ffi.Void> wallet_ptr,
    int accountIndex,
    int addressIndex,
  ) {
    return _MONERO_Wallet_deviceShowAddress(
      wallet_ptr,
      accountIndex,
      addressIndex,
    );
  }

  late final _MONERO_Wallet_deviceShowAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              ffi.Uint32)>>('MONERO_Wallet_deviceShowAddress');
  late final _MONERO_Wallet_deviceShowAddress =
      _MONERO_Wallet_deviceShowAddressPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// virtual bool reconnectDevice() = 0;
  ffi.Pointer<ffi.Char> MONERO_Wallet_reconnectDevice(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_reconnectDevice(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_reconnectDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_Wallet_reconnectDevice');
  late final _MONERO_Wallet_reconnectDevice = _MONERO_Wallet_reconnectDevicePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t getBytesReceived() = 0;
  int MONERO_Wallet_getBytesReceived(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_getBytesReceived(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_getBytesReceivedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_getBytesReceived');
  late final _MONERO_Wallet_getBytesReceived =
      _MONERO_Wallet_getBytesReceivedPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t getBytesSent() = 0;
  int MONERO_Wallet_getBytesSent(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_Wallet_getBytesSent(
      wallet_ptr,
    );
  }

  late final _MONERO_Wallet_getBytesSentPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_Wallet_getBytesSent');
  late final _MONERO_Wallet_getBytesSent = _MONERO_Wallet_getBytesSentPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// struct WalletManager
  /// {
  /// virtual Wallet * createWallet(const std::string &path, const std::string &password, const std::string &language, NetworkType nettype, uint64_t kdf_rounds = 1) = 0;
  ffi.Pointer<ffi.Void> MONERO_WalletManager_createWallet(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> language,
    int networkType,
  ) {
    return _MONERO_WalletManager_createWallet(
      wm_ptr,
      path,
      password,
      language,
      networkType,
    );
  }

  late final _MONERO_WalletManager_createWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('MONERO_WalletManager_createWallet');
  late final _MONERO_WalletManager_createWallet =
      _MONERO_WalletManager_createWalletPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Wallet * createWallet(const std::string &path, const std::string &password, const std::string &language, bool testnet = false)      // deprecated
  /// {
  /// return createWallet(path, password, language, testnet ? TESTNET : MAINNET);
  /// }
  /// virtual Wallet * openWallet(const std::string &path, const std::string &password, NetworkType nettype, uint64_t kdf_rounds = 1, WalletListener * listener = nullptr) = 0;
  ffi.Pointer<ffi.Void> MONERO_WalletManager_openWallet(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
    int networkType,
  ) {
    return _MONERO_WalletManager_openWallet(
      wm_ptr,
      path,
      password,
      networkType,
    );
  }

  late final _MONERO_WalletManager_openWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('MONERO_WalletManager_openWallet');
  late final _MONERO_WalletManager_openWallet =
      _MONERO_WalletManager_openWalletPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// Wallet * openWallet(const std::string &path, const std::string &password, bool testnet = false)     // deprecated
  /// {
  /// return openWallet(path, password, testnet ? TESTNET : MAINNET);
  /// }
  /// virtual Wallet * recoveryWallet(const std::string &path, const std::string &password, const std::string &mnemonic,
  /// NetworkType nettype = MAINNET, uint64_t restoreHeight = 0, uint64_t kdf_rounds = 1,
  /// const std::string &seed_offset = {}) = 0;
  ffi.Pointer<ffi.Void> MONERO_WalletManager_recoveryWallet(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> mnemonic,
    int networkType,
    int restoreHeight,
    int kdfRounds,
    ffi.Pointer<ffi.Char> seedOffset,
  ) {
    return _MONERO_WalletManager_recoveryWallet(
      wm_ptr,
      path,
      password,
      mnemonic,
      networkType,
      restoreHeight,
      kdfRounds,
      seedOffset,
    );
  }

  late final _MONERO_WalletManager_recoveryWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<ffi.Char>)>>('MONERO_WalletManager_recoveryWallet');
  late final _MONERO_WalletManager_recoveryWallet =
      _MONERO_WalletManager_recoveryWalletPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>)>();

  /// Wallet * recoveryWallet(const std::string &path, const std::string &password, const std::string &mnemonic,
  /// bool testnet = false, uint64_t restoreHeight = 0)           // deprecated
  /// {
  /// return recoveryWallet(path, password, mnemonic, testnet ? TESTNET : MAINNET, restoreHeight);
  /// }
  /// virtual Wallet * recoveryWallet(const std::string &path, const std::string &mnemonic, NetworkType nettype, uint64_t restoreHeight = 0) = 0;
  /// Wallet * recoveryWallet(const std::string &path, const std::string &mnemonic, bool testnet = false, uint64_t restoreHeight = 0)         // deprecated
  /// {
  /// return recoveryWallet(path, mnemonic, testnet ? TESTNET : MAINNET, restoreHeight);
  /// }
  /// virtual Wallet * createWalletFromKeys(const std::string &path,
  /// const std::string &password,
  /// const std::string &language,
  /// NetworkType nettype,
  /// uint64_t restoreHeight,
  /// const std::string &addressString,
  /// const std::string &viewKeyString,
  /// const std::string &spendKeyString = "",
  /// uint64_t kdf_rounds = 1) = 0;
  ffi.Pointer<ffi.Void> MONERO_WalletManager_createWalletFromKeys(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> language,
    int nettype,
    int restoreHeight,
    ffi.Pointer<ffi.Char> addressString,
    ffi.Pointer<ffi.Char> viewKeyString,
    ffi.Pointer<ffi.Char> spendKeyString,
    int kdf_rounds,
  ) {
    return _MONERO_WalletManager_createWalletFromKeys(
      wm_ptr,
      path,
      password,
      language,
      nettype,
      restoreHeight,
      addressString,
      viewKeyString,
      spendKeyString,
      kdf_rounds,
    );
  }

  late final _MONERO_WalletManager_createWalletFromKeysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Uint64,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('MONERO_WalletManager_createWalletFromKeys');
  late final _MONERO_WalletManager_createWalletFromKeys =
      _MONERO_WalletManager_createWalletFromKeysPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int)>();

  /// Wallet * createWalletFromKeys(const std::string &path,
  /// const std::string &password,
  /// const std::string &language,
  /// bool testnet,
  /// uint64_t restoreHeight,
  /// const std::string &addressString,
  /// const std::string &viewKeyString,
  /// const std::string &spendKeyString = "")       // deprecated
  /// {
  /// return createWalletFromKeys(path, password, language, testnet ? TESTNET : MAINNET, restoreHeight, addressString, viewKeyString, spendKeyString);
  /// }
  /// virtual Wallet * createWalletFromKeys(const std::string &path,
  /// const std::string &language,
  /// NetworkType nettype,
  /// uint64_t restoreHeight,
  /// const std::string &addressString,
  /// const std::string &viewKeyString,
  /// const std::string &spendKeyString = "") = 0;
  /// Wallet * createWalletFromKeys(const std::string &path,
  /// const std::string &language,
  /// bool testnet,
  /// uint64_t restoreHeight,
  /// const std::string &addressString,
  /// const std::string &viewKeyString,
  /// const std::string &spendKeyString = "")           // deprecated
  /// {
  /// return createWalletFromKeys(path, language, testnet ? TESTNET : MAINNET, restoreHeight, addressString, viewKeyString, spendKeyString);
  /// }
  /// virtual Wallet * createWalletFromDevice(const std::string &path,
  /// const std::string &password,
  /// NetworkType nettype,
  /// const std::string &deviceName,
  /// uint64_t restoreHeight = 0,
  /// const std::string &subaddressLookahead = "",
  /// uint64_t kdf_rounds = 1,
  /// WalletListener * listener = nullptr) = 0;
  /// virtual Wallet * createWalletFromPolyseed(const std::string &path,
  /// const std::string &password,
  /// NetworkType nettype,
  /// const std::string &mnemonic,
  /// const std::string &passphrase = "",
  /// bool newWallet = true,
  /// uint64_t restore_height = 0,
  /// uint64_t kdf_rounds = 1) = 0;
  ffi.Pointer<ffi.Void> MONERO_WalletManager_createWalletFromPolyseed(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
    int nettype,
    ffi.Pointer<ffi.Char> mnemonic,
    ffi.Pointer<ffi.Char> passphrase,
    bool newWallet,
    int restore_height,
    int kdf_rounds,
  ) {
    return _MONERO_WalletManager_createWalletFromPolyseed(
      wm_ptr,
      path,
      password,
      nettype,
      mnemonic,
      passphrase,
      newWallet,
      restore_height,
      kdf_rounds,
    );
  }

  late final _MONERO_WalletManager_createWalletFromPolyseedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Uint64,
              ffi.Uint64)>>('MONERO_WalletManager_createWalletFromPolyseed');
  late final _MONERO_WalletManager_createWalletFromPolyseed =
      _MONERO_WalletManager_createWalletFromPolyseedPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              bool,
              int,
              int)>();

  /// virtual bool closeWallet(Wallet *wallet, bool store = true) = 0;
  bool MONERO_WalletManager_closeWallet(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Void> wallet_ptr,
    bool store,
  ) {
    return _MONERO_WalletManager_closeWallet(
      wm_ptr,
      wallet_ptr,
      store,
    );
  }

  late final _MONERO_WalletManager_closeWalletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Bool)>>('MONERO_WalletManager_closeWallet');
  late final _MONERO_WalletManager_closeWallet =
      _MONERO_WalletManager_closeWalletPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, bool)>();

  /// virtual bool walletExists(const std::string &path) = 0;
  bool MONERO_WalletManager_walletExists(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _MONERO_WalletManager_walletExists(
      wm_ptr,
      path,
    );
  }

  late final _MONERO_WalletManager_walletExistsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_WalletManager_walletExists');
  late final _MONERO_WalletManager_walletExists =
      _MONERO_WalletManager_walletExistsPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool verifyWalletPassword(const std::string &keys_file_name, const std::string &password, bool no_spend_key, uint64_t kdf_rounds = 1) const = 0;
  bool MONERO_WalletManager_verifyWalletPassword(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> keys_file_name,
    ffi.Pointer<ffi.Char> password,
    bool no_spend_key,
    int kdf_rounds,
  ) {
    return _MONERO_WalletManager_verifyWalletPassword(
      wm_ptr,
      keys_file_name,
      password,
      no_spend_key,
      kdf_rounds,
    );
  }

  late final _MONERO_WalletManager_verifyWalletPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Uint64)>>('MONERO_WalletManager_verifyWalletPassword');
  late final _MONERO_WalletManager_verifyWalletPassword =
      _MONERO_WalletManager_verifyWalletPasswordPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, bool, int)>();

  /// virtual bool queryWalletDevice(Wallet::Device& device_type, const std::string &keys_file_name, const std::string &password, uint64_t kdf_rounds = 1) const = 0;
  bool MONERO_WalletManager_queryWalletDevice(
    int device_type,
    ffi.Pointer<ffi.Char> keys_file_name,
    ffi.Pointer<ffi.Char> password,
    int kdf_rounds,
  ) {
    return _MONERO_WalletManager_queryWalletDevice(
      device_type,
      keys_file_name,
      password,
      kdf_rounds,
    );
  }

  late final _MONERO_WalletManager_queryWalletDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint64)>>('MONERO_WalletManager_queryWalletDevice');
  late final _MONERO_WalletManager_queryWalletDevice =
      _MONERO_WalletManager_queryWalletDevicePtr.asFunction<
          bool Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// virtual std::vector<std::string> findWallets(const std::string &path) = 0;
  ffi.Pointer<ffi.Char> MONERO_WalletManager_findWallets(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _MONERO_WalletManager_findWallets(
      wm_ptr,
      path,
      separator,
    );
  }

  late final _MONERO_WalletManager_findWalletsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MONERO_WalletManager_findWallets');
  late final _MONERO_WalletManager_findWallets =
      _MONERO_WalletManager_findWalletsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string errorString() const = 0;
  ffi.Pointer<ffi.Char> MONERO_WalletManager_errorString(
    ffi.Pointer<ffi.Void> wm_ptr,
  ) {
    return _MONERO_WalletManager_errorString(
      wm_ptr,
    );
  }

  late final _MONERO_WalletManager_errorStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_WalletManager_errorString');
  late final _MONERO_WalletManager_errorString =
      _MONERO_WalletManager_errorStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  /// virtual void setDaemonAddress(const std::string &address) = 0;
  void MONERO_WalletManager_setDaemonAddress(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _MONERO_WalletManager_setDaemonAddress(
      wm_ptr,
      address,
    );
  }

  late final _MONERO_WalletManager_setDaemonAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_WalletManager_setDaemonAddress');
  late final _MONERO_WalletManager_setDaemonAddress =
      _MONERO_WalletManager_setDaemonAddressPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual bool connected(uint32_t *version = NULL) = 0;
  /// virtual uint64_t blockchainHeight() = 0;
  int MONERO_WalletManager_blockchainHeight(
    ffi.Pointer<ffi.Void> wm_ptr,
  ) {
    return _MONERO_WalletManager_blockchainHeight(
      wm_ptr,
    );
  }

  late final _MONERO_WalletManager_blockchainHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_WalletManager_blockchainHeight');
  late final _MONERO_WalletManager_blockchainHeight =
      _MONERO_WalletManager_blockchainHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t blockchainTargetHeight() = 0;
  int MONERO_WalletManager_blockchainTargetHeight(
    ffi.Pointer<ffi.Void> wm_ptr,
  ) {
    return _MONERO_WalletManager_blockchainTargetHeight(
      wm_ptr,
    );
  }

  late final _MONERO_WalletManager_blockchainTargetHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_WalletManager_blockchainTargetHeight');
  late final _MONERO_WalletManager_blockchainTargetHeight =
      _MONERO_WalletManager_blockchainTargetHeightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t networkDifficulty() = 0;
  int MONERO_WalletManager_networkDifficulty(
    ffi.Pointer<ffi.Void> wm_ptr,
  ) {
    return _MONERO_WalletManager_networkDifficulty(
      wm_ptr,
    );
  }

  late final _MONERO_WalletManager_networkDifficultyPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_WalletManager_networkDifficulty');
  late final _MONERO_WalletManager_networkDifficulty =
      _MONERO_WalletManager_networkDifficultyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual double miningHashRate() = 0;
  double MONERO_WalletManager_miningHashRate(
    ffi.Pointer<ffi.Void> wm_ptr,
  ) {
    return _MONERO_WalletManager_miningHashRate(
      wm_ptr,
    );
  }

  late final _MONERO_WalletManager_miningHashRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_WalletManager_miningHashRate');
  late final _MONERO_WalletManager_miningHashRate =
      _MONERO_WalletManager_miningHashRatePtr.asFunction<
          double Function(ffi.Pointer<ffi.Void>)>();

  /// virtual uint64_t blockTarget() = 0;
  int MONERO_WalletManager_blockTarget(
    ffi.Pointer<ffi.Void> wm_ptr,
  ) {
    return _MONERO_WalletManager_blockTarget(
      wm_ptr,
    );
  }

  late final _MONERO_WalletManager_blockTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_WalletManager_blockTarget');
  late final _MONERO_WalletManager_blockTarget =
      _MONERO_WalletManager_blockTargetPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool isMining() = 0;
  bool MONERO_WalletManager_isMining(
    ffi.Pointer<ffi.Void> wm_ptr,
  ) {
    return _MONERO_WalletManager_isMining(
      wm_ptr,
    );
  }

  late final _MONERO_WalletManager_isMiningPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_WalletManager_isMining');
  late final _MONERO_WalletManager_isMining = _MONERO_WalletManager_isMiningPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// virtual bool startMining(const std::string &address, uint32_t threads = 1, bool background_mining = false, bool ignore_battery = true) = 0;
  bool MONERO_WalletManager_startMining(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> address,
    int threads,
    bool backgroundMining,
    bool ignoreBattery,
  ) {
    return _MONERO_WalletManager_startMining(
      wm_ptr,
      address,
      threads,
      backgroundMining,
      ignoreBattery,
    );
  }

  late final _MONERO_WalletManager_startMiningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Bool,
              ffi.Bool)>>('MONERO_WalletManager_startMining');
  late final _MONERO_WalletManager_startMining =
      _MONERO_WalletManager_startMiningPtr.asFunction<
          bool Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int, bool, bool)>();

  /// virtual bool stopMining() = 0;
  bool MONERO_WalletManager_stopMining(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _MONERO_WalletManager_stopMining(
      wm_ptr,
      address,
    );
  }

  late final _MONERO_WalletManager_stopMiningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_WalletManager_stopMining');
  late final _MONERO_WalletManager_stopMining =
      _MONERO_WalletManager_stopMiningPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// virtual std::string resolveOpenAlias(const std::string &address, bool &dnssec_valid) const = 0;
  ffi.Pointer<ffi.Char> MONERO_WalletManager_resolveOpenAlias(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> address,
    bool dnssec_valid,
  ) {
    return _MONERO_WalletManager_resolveOpenAlias(
      wm_ptr,
      address,
      dnssec_valid,
    );
  }

  late final _MONERO_WalletManager_resolveOpenAliasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('MONERO_WalletManager_resolveOpenAlias');
  late final _MONERO_WalletManager_resolveOpenAlias =
      _MONERO_WalletManager_resolveOpenAliasPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, bool)>();

  /// static std::tuple<bool, std::string, std::string, std::string, std::string> checkUpdates(
  /// const std::string &software,
  /// std::string subdir,
  /// const char *buildtag = nullptr,
  /// const char *current_version = nullptr);
  /// virtual bool setProxy(const std::string &address) = 0;
  bool MONERO_WalletManager_setProxy(
    ffi.Pointer<ffi.Void> wm_ptr,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _MONERO_WalletManager_setProxy(
      wm_ptr,
      address,
    );
  }

  late final _MONERO_WalletManager_setProxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('MONERO_WalletManager_setProxy');
  late final _MONERO_WalletManager_setProxy =
      _MONERO_WalletManager_setProxyPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  /// };
  late final ffi.Pointer<ffi.Int> _LogLevel_Silent =
      _lookup<ffi.Int>('LogLevel_Silent');

  int get LogLevel_Silent => _LogLevel_Silent.value;

  set LogLevel_Silent(int value) => _LogLevel_Silent.value = value;

  late final ffi.Pointer<ffi.Int> _LogLevel_0 = _lookup<ffi.Int>('LogLevel_0');

  int get LogLevel_0 => _LogLevel_0.value;

  set LogLevel_0(int value) => _LogLevel_0.value = value;

  late final ffi.Pointer<ffi.Int> _LogLevel_1 = _lookup<ffi.Int>('LogLevel_1');

  int get LogLevel_1 => _LogLevel_1.value;

  set LogLevel_1(int value) => _LogLevel_1.value = value;

  late final ffi.Pointer<ffi.Int> _LogLevel_2 = _lookup<ffi.Int>('LogLevel_2');

  int get LogLevel_2 => _LogLevel_2.value;

  set LogLevel_2(int value) => _LogLevel_2.value = value;

  late final ffi.Pointer<ffi.Int> _LogLevel_3 = _lookup<ffi.Int>('LogLevel_3');

  int get LogLevel_3 => _LogLevel_3.value;

  set LogLevel_3(int value) => _LogLevel_3.value = value;

  late final ffi.Pointer<ffi.Int> _LogLevel_4 = _lookup<ffi.Int>('LogLevel_4');

  int get LogLevel_4 => _LogLevel_4.value;

  set LogLevel_4(int value) => _LogLevel_4.value = value;

  late final ffi.Pointer<ffi.Int> _LogLevel_Min =
      _lookup<ffi.Int>('LogLevel_Min');

  int get LogLevel_Min => _LogLevel_Min.value;

  set LogLevel_Min(int value) => _LogLevel_Min.value = value;

  late final ffi.Pointer<ffi.Int> _LogLevel_Max =
      _lookup<ffi.Int>('LogLevel_Max');

  int get LogLevel_Max => _LogLevel_Max.value;

  set LogLevel_Max(int value) => _LogLevel_Max.value = value;

  /// struct WalletManagerFactory
  /// {
  /// enum LogLevel {
  /// LogLevel_Silent = -1,
  /// LogLevel_0 = 0,
  /// LogLevel_1 = 1,
  /// LogLevel_2 = 2,
  /// LogLevel_3 = 3,
  /// LogLevel_4 = 4,
  /// LogLevel_Min = LogLevel_Silent,
  /// LogLevel_Max = LogLevel_4
  /// };
  /// static WalletManager * getWalletManager();
  ffi.Pointer<ffi.Void> MONERO_WalletManagerFactory_getWalletManager() {
    return _MONERO_WalletManagerFactory_getWalletManager();
  }

  late final _MONERO_WalletManagerFactory_getWalletManagerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'MONERO_WalletManagerFactory_getWalletManager');
  late final _MONERO_WalletManagerFactory_getWalletManager =
      _MONERO_WalletManagerFactory_getWalletManagerPtr.asFunction<
          ffi.Pointer<ffi.Void> Function()>();

  /// static void setLogLevel(int level);
  void MONERO_WalletManagerFactory_setLogLevel(
    int level,
  ) {
    return _MONERO_WalletManagerFactory_setLogLevel(
      level,
    );
  }

  late final _MONERO_WalletManagerFactory_setLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'MONERO_WalletManagerFactory_setLogLevel');
  late final _MONERO_WalletManagerFactory_setLogLevel =
      _MONERO_WalletManagerFactory_setLogLevelPtr.asFunction<
          void Function(int)>();

  /// static void setLogCategories(const std::string &categories);
  void MONERO_WalletManagerFactory_setLogCategories(
    ffi.Pointer<ffi.Char> categories,
  ) {
    return _MONERO_WalletManagerFactory_setLogCategories(
      categories,
    );
  }

  late final _MONERO_WalletManagerFactory_setLogCategoriesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'MONERO_WalletManagerFactory_setLogCategories');
  late final _MONERO_WalletManagerFactory_setLogCategories =
      _MONERO_WalletManagerFactory_setLogCategoriesPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>)>();

  /// };
  /// }
  void MONERO_DEBUG_test0() {
    return _MONERO_DEBUG_test0();
  }

  late final _MONERO_DEBUG_test0Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MONERO_DEBUG_test0');
  late final _MONERO_DEBUG_test0 =
      _MONERO_DEBUG_test0Ptr.asFunction<void Function()>();

  bool MONERO_DEBUG_test1(
    bool x,
  ) {
    return _MONERO_DEBUG_test1(
      x,
    );
  }

  late final _MONERO_DEBUG_test1Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Bool)>>(
          'MONERO_DEBUG_test1');
  late final _MONERO_DEBUG_test1 =
      _MONERO_DEBUG_test1Ptr.asFunction<bool Function(bool)>();

  int MONERO_DEBUG_test2(
    int x,
  ) {
    return _MONERO_DEBUG_test2(
      x,
    );
  }

  late final _MONERO_DEBUG_test2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'MONERO_DEBUG_test2');
  late final _MONERO_DEBUG_test2 =
      _MONERO_DEBUG_test2Ptr.asFunction<int Function(int)>();

  int MONERO_DEBUG_test3(
    int x,
  ) {
    return _MONERO_DEBUG_test3(
      x,
    );
  }

  late final _MONERO_DEBUG_test3Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>(
          'MONERO_DEBUG_test3');
  late final _MONERO_DEBUG_test3 =
      _MONERO_DEBUG_test3Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> MONERO_DEBUG_test4(
    int x,
  ) {
    return _MONERO_DEBUG_test4(
      x,
    );
  }

  late final _MONERO_DEBUG_test4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Uint64)>>(
          'MONERO_DEBUG_test4');
  late final _MONERO_DEBUG_test4 =
      _MONERO_DEBUG_test4Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Char> MONERO_DEBUG_test5() {
    return _MONERO_DEBUG_test5();
  }

  late final _MONERO_DEBUG_test5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'MONERO_DEBUG_test5');
  late final _MONERO_DEBUG_test5 =
      _MONERO_DEBUG_test5Ptr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> MONERO_DEBUG_test5_std() {
    return _MONERO_DEBUG_test5_std();
  }

  late final _MONERO_DEBUG_test5_stdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'MONERO_DEBUG_test5_std');
  late final _MONERO_DEBUG_test5_std =
      _MONERO_DEBUG_test5_stdPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool MONERO_DEBUG_isPointerNull(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_DEBUG_isPointerNull(
      wallet_ptr,
    );
  }

  late final _MONERO_DEBUG_isPointerNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_DEBUG_isPointerNull');
  late final _MONERO_DEBUG_isPointerNull = _MONERO_DEBUG_isPointerNullPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  /// cake world
  ffi.Pointer<ffi.Void> MONERO_cw_getWalletListener(
    ffi.Pointer<ffi.Void> wallet_ptr,
  ) {
    return _MONERO_cw_getWalletListener(
      wallet_ptr,
    );
  }

  late final _MONERO_cw_getWalletListenerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('MONERO_cw_getWalletListener');
  late final _MONERO_cw_getWalletListener = _MONERO_cw_getWalletListenerPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void MONERO_cw_WalletListener_resetNeedToRefresh(
    ffi.Pointer<ffi.Void> cw_walletListener_ptr,
  ) {
    return _MONERO_cw_WalletListener_resetNeedToRefresh(
      cw_walletListener_ptr,
    );
  }

  late final _MONERO_cw_WalletListener_resetNeedToRefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_cw_WalletListener_resetNeedToRefresh');
  late final _MONERO_cw_WalletListener_resetNeedToRefresh =
      _MONERO_cw_WalletListener_resetNeedToRefreshPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  bool MONERO_cw_WalletListener_isNeedToRefresh(
    ffi.Pointer<ffi.Void> cw_walletListener_ptr,
  ) {
    return _MONERO_cw_WalletListener_isNeedToRefresh(
      cw_walletListener_ptr,
    );
  }

  late final _MONERO_cw_WalletListener_isNeedToRefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_cw_WalletListener_isNeedToRefresh');
  late final _MONERO_cw_WalletListener_isNeedToRefresh =
      _MONERO_cw_WalletListener_isNeedToRefreshPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  bool MONERO_cw_WalletListener_isNewTransactionExist(
    ffi.Pointer<ffi.Void> cw_walletListener_ptr,
  ) {
    return _MONERO_cw_WalletListener_isNewTransactionExist(
      cw_walletListener_ptr,
    );
  }

  late final _MONERO_cw_WalletListener_isNewTransactionExistPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_cw_WalletListener_isNewTransactionExist');
  late final _MONERO_cw_WalletListener_isNewTransactionExist =
      _MONERO_cw_WalletListener_isNewTransactionExistPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>)>();

  void MONERO_cw_WalletListener_resetIsNewTransactionExist(
    ffi.Pointer<ffi.Void> cw_walletListener_ptr,
  ) {
    return _MONERO_cw_WalletListener_resetIsNewTransactionExist(
      cw_walletListener_ptr,
    );
  }

  late final _MONERO_cw_WalletListener_resetIsNewTransactionExistPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_cw_WalletListener_resetIsNewTransactionExist');
  late final _MONERO_cw_WalletListener_resetIsNewTransactionExist =
      _MONERO_cw_WalletListener_resetIsNewTransactionExistPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>)>();

  int MONERO_cw_WalletListener_height(
    ffi.Pointer<ffi.Void> cw_walletListener_ptr,
  ) {
    return _MONERO_cw_WalletListener_height(
      cw_walletListener_ptr,
    );
  }

  late final _MONERO_cw_WalletListener_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>>(
          'MONERO_cw_WalletListener_height');
  late final _MONERO_cw_WalletListener_height =
      _MONERO_cw_WalletListener_heightPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>)>();
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

final class accessx_descriptor extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ad_name_offset;

  @ffi.Int()
  external int ad_flags;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> ad_pad;
}

typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef gid_t = __darwin_gid_t;
typedef __darwin_gid_t = __uint32_t;
typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef off_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef useconds_t = __darwin_useconds_t;
typedef __darwin_useconds_t = __uint32_t;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

final class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;

final class timeval extends ffi.Struct {
  /// seconds
  @__darwin_time_t()
  external int tv_sec;

  /// and microseconds
  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_suseconds_t = __int32_t;
typedef sigset_t = __darwin_sigset_t;
typedef __darwin_sigset_t = __uint32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;

final class fssearchblock extends ffi.Opaque {}

final class searchstate extends ffi.Opaque {}

const int __WORDSIZE = 64;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int _POSIX_VERSION = 200112;

const int _POSIX2_VERSION = 200112;

const int _POSIX_VDISABLE = 255;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int F_OK = 0;

const int X_OK = 1;

const int W_OK = 2;

const int R_OK = 4;

const int _READ_OK = 512;

const int _WRITE_OK = 1024;

const int _EXECUTE_OK = 2048;

const int _DELETE_OK = 4096;

const int _APPEND_OK = 8192;

const int _RMFILE_OK = 16384;

const int _RATTR_OK = 32768;

const int _WATTR_OK = 65536;

const int _REXT_OK = 131072;

const int _WEXT_OK = 262144;

const int _RPERM_OK = 524288;

const int _WPERM_OK = 1048576;

const int _CHOWN_OK = 2097152;

const int _ACCESS_EXTENDED_MASK = 4193792;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int ACCESSX_MAX_DESCRIPTORS = 100;

const int ACCESSX_MAX_TABLESIZE = 16384;

const int _PC_LINK_MAX = 1;

const int _PC_MAX_CANON = 2;

const int _PC_MAX_INPUT = 3;

const int _PC_NAME_MAX = 4;

const int _PC_PATH_MAX = 5;

const int _PC_PIPE_BUF = 6;

const int _PC_CHOWN_RESTRICTED = 7;

const int _PC_NO_TRUNC = 8;

const int _PC_VDISABLE = 9;

const int _PC_NAME_CHARS_MAX = 10;

const int _PC_CASE_SENSITIVE = 11;

const int _PC_CASE_PRESERVING = 12;

const int _PC_EXTENDED_SECURITY_NP = 13;

const int _PC_AUTH_OPAQUE_NP = 14;

const int _PC_2_SYMLINKS = 15;

const int _PC_ALLOC_SIZE_MIN = 16;

const int _PC_ASYNC_IO = 17;

const int _PC_FILESIZEBITS = 18;

const int _PC_PRIO_IO = 19;

const int _PC_REC_INCR_XFER_SIZE = 20;

const int _PC_REC_MAX_XFER_SIZE = 21;

const int _PC_REC_MIN_XFER_SIZE = 22;

const int _PC_REC_XFER_ALIGN = 23;

const int _PC_SYMLINK_MAX = 24;

const int _PC_SYNC_IO = 25;

const int _PC_XATTR_SIZE_BITS = 26;

const int _PC_MIN_HOLE_SIZE = 27;

const int _CS_PATH = 1;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 140000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 140400;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _XOPEN_VERSION = 600;

const int _XOPEN_XCU_VERSION = 4;

const int _POSIX_ADVISORY_INFO = -1;

const int _POSIX_ASYNCHRONOUS_IO = -1;

const int _POSIX_BARRIERS = -1;

const int _POSIX_CHOWN_RESTRICTED = 200112;

const int _POSIX_CLOCK_SELECTION = -1;

const int _POSIX_CPUTIME = -1;

const int _POSIX_FSYNC = 200112;

const int _POSIX_IPV6 = 200112;

const int _POSIX_JOB_CONTROL = 200112;

const int _POSIX_MAPPED_FILES = 200112;

const int _POSIX_MEMLOCK = -1;

const int _POSIX_MEMLOCK_RANGE = -1;

const int _POSIX_MEMORY_PROTECTION = 200112;

const int _POSIX_MESSAGE_PASSING = -1;

const int _POSIX_MONOTONIC_CLOCK = -1;

const int _POSIX_NO_TRUNC = 200112;

const int _POSIX_PRIORITIZED_IO = -1;

const int _POSIX_PRIORITY_SCHEDULING = -1;

const int _POSIX_RAW_SOCKETS = -1;

const int _POSIX_READER_WRITER_LOCKS = 200112;

const int _POSIX_REALTIME_SIGNALS = -1;

const int _POSIX_REGEXP = 200112;

const int _POSIX_SAVED_IDS = 200112;

const int _POSIX_SEMAPHORES = -1;

const int _POSIX_SHARED_MEMORY_OBJECTS = -1;

const int _POSIX_SHELL = 200112;

const int _POSIX_SPAWN = 200112;

const int _POSIX_SPIN_LOCKS = -1;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_SYNCHRONIZED_IO = -1;

const int _POSIX_THREAD_ATTR_STACKADDR = 200112;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200112;

const int _POSIX_THREAD_CPUTIME = -1;

const int _POSIX_THREAD_PRIO_INHERIT = -1;

const int _POSIX_THREAD_PRIO_PROTECT = -1;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = -1;

const int _POSIX_THREAD_PROCESS_SHARED = 200112;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200112;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_THREADS = 200112;

const int _POSIX_TIMEOUTS = -1;

const int _POSIX_TIMERS = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX2_C_BIND = 200112;

const int _POSIX2_C_DEV = 200112;

const int _POSIX2_CHAR_TERM = 200112;

const int _POSIX2_FORT_DEV = -1;

const int _POSIX2_FORT_RUN = 200112;

const int _POSIX2_LOCALEDEF = 200112;

const int _POSIX2_PBS = -1;

const int _POSIX2_PBS_ACCOUNTING = -1;

const int _POSIX2_PBS_CHECKPOINT = -1;

const int _POSIX2_PBS_LOCATE = -1;

const int _POSIX2_PBS_MESSAGE = -1;

const int _POSIX2_PBS_TRACK = -1;

const int _POSIX2_SW_DEV = 200112;

const int _POSIX2_UPE = 200112;

const int __ILP32_OFF32 = -1;

const int __ILP32_OFFBIG = -1;

const int __LP64_OFF64 = 1;

const int __LPBIG_OFFBIG = 1;

const int _POSIX_V6_ILP32_OFF32 = -1;

const int _POSIX_V6_ILP32_OFFBIG = -1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _POSIX_V6_LPBIG_OFFBIG = 1;

const int _POSIX_V7_ILP32_OFF32 = -1;

const int _POSIX_V7_ILP32_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V7_LPBIG_OFFBIG = 1;

const int _V6_ILP32_OFF32 = -1;

const int _V6_ILP32_OFFBIG = -1;

const int _V6_LP64_OFF64 = 1;

const int _V6_LPBIG_OFFBIG = 1;

const int _XBS5_ILP32_OFF32 = -1;

const int _XBS5_ILP32_OFFBIG = -1;

const int _XBS5_LP64_OFF64 = 1;

const int _XBS5_LPBIG_OFFBIG = 1;

const int _XOPEN_CRYPT = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = -1;

const int _XOPEN_REALTIME = -1;

const int _XOPEN_REALTIME_THREADS = -1;

const int _XOPEN_SHM = 1;

const int _XOPEN_STREAMS = -1;

const int _XOPEN_UNIX = 1;

const int _SC_ARG_MAX = 1;

const int _SC_CHILD_MAX = 2;

const int _SC_CLK_TCK = 3;

const int _SC_NGROUPS_MAX = 4;

const int _SC_OPEN_MAX = 5;

const int _SC_JOB_CONTROL = 6;

const int _SC_SAVED_IDS = 7;

const int _SC_VERSION = 8;

const int _SC_BC_BASE_MAX = 9;

const int _SC_BC_DIM_MAX = 10;

const int _SC_BC_SCALE_MAX = 11;

const int _SC_BC_STRING_MAX = 12;

const int _SC_COLL_WEIGHTS_MAX = 13;

const int _SC_EXPR_NEST_MAX = 14;

const int _SC_LINE_MAX = 15;

const int _SC_RE_DUP_MAX = 16;

const int _SC_2_VERSION = 17;

const int _SC_2_C_BIND = 18;

const int _SC_2_C_DEV = 19;

const int _SC_2_CHAR_TERM = 20;

const int _SC_2_FORT_DEV = 21;

const int _SC_2_FORT_RUN = 22;

const int _SC_2_LOCALEDEF = 23;

const int _SC_2_SW_DEV = 24;

const int _SC_2_UPE = 25;

const int _SC_STREAM_MAX = 26;

const int _SC_TZNAME_MAX = 27;

const int _SC_ASYNCHRONOUS_IO = 28;

const int _SC_PAGESIZE = 29;

const int _SC_MEMLOCK = 30;

const int _SC_MEMLOCK_RANGE = 31;

const int _SC_MEMORY_PROTECTION = 32;

const int _SC_MESSAGE_PASSING = 33;

const int _SC_PRIORITIZED_IO = 34;

const int _SC_PRIORITY_SCHEDULING = 35;

const int _SC_REALTIME_SIGNALS = 36;

const int _SC_SEMAPHORES = 37;

const int _SC_FSYNC = 38;

const int _SC_SHARED_MEMORY_OBJECTS = 39;

const int _SC_SYNCHRONIZED_IO = 40;

const int _SC_TIMERS = 41;

const int _SC_AIO_LISTIO_MAX = 42;

const int _SC_AIO_MAX = 43;

const int _SC_AIO_PRIO_DELTA_MAX = 44;

const int _SC_DELAYTIMER_MAX = 45;

const int _SC_MQ_OPEN_MAX = 46;

const int _SC_MAPPED_FILES = 47;

const int _SC_RTSIG_MAX = 48;

const int _SC_SEM_NSEMS_MAX = 49;

const int _SC_SEM_VALUE_MAX = 50;

const int _SC_SIGQUEUE_MAX = 51;

const int _SC_TIMER_MAX = 52;

const int _SC_NPROCESSORS_CONF = 57;

const int _SC_NPROCESSORS_ONLN = 58;

const int _SC_2_PBS = 59;

const int _SC_2_PBS_ACCOUNTING = 60;

const int _SC_2_PBS_CHECKPOINT = 61;

const int _SC_2_PBS_LOCATE = 62;

const int _SC_2_PBS_MESSAGE = 63;

const int _SC_2_PBS_TRACK = 64;

const int _SC_ADVISORY_INFO = 65;

const int _SC_BARRIERS = 66;

const int _SC_CLOCK_SELECTION = 67;

const int _SC_CPUTIME = 68;

const int _SC_FILE_LOCKING = 69;

const int _SC_GETGR_R_SIZE_MAX = 70;

const int _SC_GETPW_R_SIZE_MAX = 71;

const int _SC_HOST_NAME_MAX = 72;

const int _SC_LOGIN_NAME_MAX = 73;

const int _SC_MONOTONIC_CLOCK = 74;

const int _SC_MQ_PRIO_MAX = 75;

const int _SC_READER_WRITER_LOCKS = 76;

const int _SC_REGEXP = 77;

const int _SC_SHELL = 78;

const int _SC_SPAWN = 79;

const int _SC_SPIN_LOCKS = 80;

const int _SC_SPORADIC_SERVER = 81;

const int _SC_THREAD_ATTR_STACKADDR = 82;

const int _SC_THREAD_ATTR_STACKSIZE = 83;

const int _SC_THREAD_CPUTIME = 84;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 85;

const int _SC_THREAD_KEYS_MAX = 86;

const int _SC_THREAD_PRIO_INHERIT = 87;

const int _SC_THREAD_PRIO_PROTECT = 88;

const int _SC_THREAD_PRIORITY_SCHEDULING = 89;

const int _SC_THREAD_PROCESS_SHARED = 90;

const int _SC_THREAD_SAFE_FUNCTIONS = 91;

const int _SC_THREAD_SPORADIC_SERVER = 92;

const int _SC_THREAD_STACK_MIN = 93;

const int _SC_THREAD_THREADS_MAX = 94;

const int _SC_TIMEOUTS = 95;

const int _SC_THREADS = 96;

const int _SC_TRACE = 97;

const int _SC_TRACE_EVENT_FILTER = 98;

const int _SC_TRACE_INHERIT = 99;

const int _SC_TRACE_LOG = 100;

const int _SC_TTY_NAME_MAX = 101;

const int _SC_TYPED_MEMORY_OBJECTS = 102;

const int _SC_V6_ILP32_OFF32 = 103;

const int _SC_V6_ILP32_OFFBIG = 104;

const int _SC_V6_LP64_OFF64 = 105;

const int _SC_V6_LPBIG_OFFBIG = 106;

const int _SC_IPV6 = 118;

const int _SC_RAW_SOCKETS = 119;

const int _SC_SYMLOOP_MAX = 120;

const int _SC_ATEXIT_MAX = 107;

const int _SC_IOV_MAX = 56;

const int _SC_PAGE_SIZE = 29;

const int _SC_XOPEN_CRYPT = 108;

const int _SC_XOPEN_ENH_I18N = 109;

const int _SC_XOPEN_LEGACY = 110;

const int _SC_XOPEN_REALTIME = 111;

const int _SC_XOPEN_REALTIME_THREADS = 112;

const int _SC_XOPEN_SHM = 113;

const int _SC_XOPEN_STREAMS = 114;

const int _SC_XOPEN_UNIX = 115;

const int _SC_XOPEN_VERSION = 116;

const int _SC_XOPEN_XCU_VERSION = 121;

const int _SC_XBS5_ILP32_OFF32 = 122;

const int _SC_XBS5_ILP32_OFFBIG = 123;

const int _SC_XBS5_LP64_OFF64 = 124;

const int _SC_XBS5_LPBIG_OFFBIG = 125;

const int _SC_SS_REPL_MAX = 126;

const int _SC_TRACE_EVENT_NAME_MAX = 127;

const int _SC_TRACE_NAME_MAX = 128;

const int _SC_TRACE_SYS_MAX = 129;

const int _SC_TRACE_USER_EVENT_MAX = 130;

const int _SC_PASS_MAX = 131;

const int _SC_PHYS_PAGES = 200;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 4;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 8;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 10;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 20;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 21;

const int _CS_XBS5_ILP32_OFF32_LIBS = 22;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 23;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 24;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 26;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 28;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 29;

const int _CS_XBS5_LP64_OFF64_LIBS = 30;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 31;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 34;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35;

const int _CS_DARWIN_USER_DIR = 65536;

const int _CS_DARWIN_USER_TEMP_DIR = 65537;

const int _CS_DARWIN_USER_CACHE_DIR = 65538;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int SYNC_VOLUME_FULLSYNC = 1;

const int SYNC_VOLUME_WAIT = 2;
